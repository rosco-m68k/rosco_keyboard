   1               		.file	"bootloader.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.bootloader_jump,"ax",@progbits
  11               	.global	bootloader_jump
  13               	bootloader_jump:
  14               	.LFB106:
  15               		.file 1 "./tmk_core/common/avr/bootloader.c"
   1:./tmk_core/common/avr/bootloader.c **** #include <stdint.h>
   2:./tmk_core/common/avr/bootloader.c **** #include <stdbool.h>
   3:./tmk_core/common/avr/bootloader.c **** #include <avr/io.h>
   4:./tmk_core/common/avr/bootloader.c **** #include <avr/interrupt.h>
   5:./tmk_core/common/avr/bootloader.c **** #include <avr/wdt.h>
   6:./tmk_core/common/avr/bootloader.c **** #include <util/delay.h>
   7:./tmk_core/common/avr/bootloader.c **** #include "bootloader.h"
   8:./tmk_core/common/avr/bootloader.c **** 
   9:./tmk_core/common/avr/bootloader.c **** #ifdef PROTOCOL_LUFA
  10:./tmk_core/common/avr/bootloader.c **** #include <LUFA/Drivers/USB/USB.h>
  11:./tmk_core/common/avr/bootloader.c **** #endif
  12:./tmk_core/common/avr/bootloader.c **** 
  13:./tmk_core/common/avr/bootloader.c **** 
  14:./tmk_core/common/avr/bootloader.c **** /* Bootloader Size in *bytes*
  15:./tmk_core/common/avr/bootloader.c ****  *
  16:./tmk_core/common/avr/bootloader.c ****  * AVR Boot section size are defined by setting BOOTSZ fuse in fact. Consult with your MCU datashee
  17:./tmk_core/common/avr/bootloader.c ****  * Note that 'Word'(2 bytes) size and address are used in datasheet while TMK uses 'Byte'.
  18:./tmk_core/common/avr/bootloader.c ****  *
  19:./tmk_core/common/avr/bootloader.c ****  *
  20:./tmk_core/common/avr/bootloader.c ****  * Size of Bootloaders in bytes:
  21:./tmk_core/common/avr/bootloader.c ****  *   Atmel DFU loader(ATmega32U4)   4096
  22:./tmk_core/common/avr/bootloader.c ****  *   Atmel DFU loader(AT90USB128)   8192
  23:./tmk_core/common/avr/bootloader.c ****  *   LUFA bootloader(ATmega32U4)    4096
  24:./tmk_core/common/avr/bootloader.c ****  *   Arduino Caterina(ATmega32U4)   4096
  25:./tmk_core/common/avr/bootloader.c ****  *   USBaspLoader(ATmega***)        2048
  26:./tmk_core/common/avr/bootloader.c ****  *   Teensy   halfKay(ATmega32U4)   512
  27:./tmk_core/common/avr/bootloader.c ****  *   Teensy++ halfKay(AT90USB128)   1024
  28:./tmk_core/common/avr/bootloader.c ****  *
  29:./tmk_core/common/avr/bootloader.c ****  *
  30:./tmk_core/common/avr/bootloader.c ****  * AVR Boot section is located at the end of Flash memory like the followings.
  31:./tmk_core/common/avr/bootloader.c ****  *
  32:./tmk_core/common/avr/bootloader.c ****  *
  33:./tmk_core/common/avr/bootloader.c ****  * byte     Atmel/LUFA(ATMega32u4)          byte     Atmel(AT90SUB128)
  34:./tmk_core/common/avr/bootloader.c ****  * 0x0000   +---------------+               0x00000  +---------------+
  35:./tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  36:./tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  37:./tmk_core/common/avr/bootloader.c ****  *          |  Application  |                        |  Application  |
  38:./tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  39:./tmk_core/common/avr/bootloader.c ****  *          =               =                        =               =
  40:./tmk_core/common/avr/bootloader.c ****  *          |               | 32KB-4KB               |               | 128KB-8KB
  41:./tmk_core/common/avr/bootloader.c ****  * 0x7000   +---------------+               0x1E000  +---------------+
  42:./tmk_core/common/avr/bootloader.c ****  *          |  Bootloader   | 4KB                    |  Bootloader   | 8KB
  43:./tmk_core/common/avr/bootloader.c ****  * 0x7FFF   +---------------+               0x1FFFF  +---------------+
  44:./tmk_core/common/avr/bootloader.c ****  *
  45:./tmk_core/common/avr/bootloader.c ****  *
  46:./tmk_core/common/avr/bootloader.c ****  * byte     Teensy(ATMega32u4)              byte     Teensy++(AT90SUB128)
  47:./tmk_core/common/avr/bootloader.c ****  * 0x0000   +---------------+               0x00000  +---------------+
  48:./tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  49:./tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  50:./tmk_core/common/avr/bootloader.c ****  *          |  Application  |                        |  Application  |
  51:./tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  52:./tmk_core/common/avr/bootloader.c ****  *          =               =                        =               =
  53:./tmk_core/common/avr/bootloader.c ****  *          |               | 32KB-512B              |               | 128KB-1KB
  54:./tmk_core/common/avr/bootloader.c ****  * 0x7E00   +---------------+               0x1FC00  +---------------+
  55:./tmk_core/common/avr/bootloader.c ****  *          |  Bootloader   | 512B                   |  Bootloader   | 1KB
  56:./tmk_core/common/avr/bootloader.c ****  * 0x7FFF   +---------------+               0x1FFFF  +---------------+
  57:./tmk_core/common/avr/bootloader.c ****  */
  58:./tmk_core/common/avr/bootloader.c **** #ifndef BOOTLOADER_SIZE
  59:./tmk_core/common/avr/bootloader.c **** #warning To use bootloader_jump() you need to define BOOTLOADER_SIZE in config.h.
  60:./tmk_core/common/avr/bootloader.c **** #define BOOTLOADER_SIZE     4096
  61:./tmk_core/common/avr/bootloader.c **** #endif
  62:./tmk_core/common/avr/bootloader.c **** 
  63:./tmk_core/common/avr/bootloader.c **** #define FLASH_SIZE          (FLASHEND + 1L)
  64:./tmk_core/common/avr/bootloader.c **** #define BOOTLOADER_START    (FLASH_SIZE - BOOTLOADER_SIZE)
  65:./tmk_core/common/avr/bootloader.c **** 
  66:./tmk_core/common/avr/bootloader.c **** 
  67:./tmk_core/common/avr/bootloader.c **** /*
  68:./tmk_core/common/avr/bootloader.c ****  * Entering the Bootloader via Software
  69:./tmk_core/common/avr/bootloader.c ****  * http://www.fourwalledcubicle.com/files/LUFA/Doc/120730/html/_page__software_bootloader_start.htm
  70:./tmk_core/common/avr/bootloader.c ****  */
  71:./tmk_core/common/avr/bootloader.c **** #define BOOTLOADER_RESET_KEY 0xB007B007
  72:./tmk_core/common/avr/bootloader.c **** uint32_t reset_key  __attribute__ ((section (".noinit")));
  73:./tmk_core/common/avr/bootloader.c **** 
  74:./tmk_core/common/avr/bootloader.c **** /* initialize MCU status by watchdog reset */
  75:./tmk_core/common/avr/bootloader.c **** void bootloader_jump(void) {
  16               		.loc 1 75 28 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  76:./tmk_core/common/avr/bootloader.c ****     #ifndef CATERINA_BOOTLOADER
  77:./tmk_core/common/avr/bootloader.c **** 
  78:./tmk_core/common/avr/bootloader.c ****         #ifdef PROTOCOL_LUFA
  79:./tmk_core/common/avr/bootloader.c ****             USB_Disable();
  22               		.loc 1 79 13 view .LVU1
  23 0000 0E94 0000 		call USB_Disable
  24               	.LVL0:
  80:./tmk_core/common/avr/bootloader.c ****             cli();
  25               		.loc 1 80 13 view .LVU2
  26               	/* #APP */
  27               	 ;  80 "./tmk_core/common/avr/bootloader.c" 1
  28 0004 F894      		cli
  29               	 ;  0 "" 2
  81:./tmk_core/common/avr/bootloader.c ****             _delay_ms(2000);
  30               		.loc 1 81 13 view .LVU3
  31               	.LVL1:
  32               	/* #NOAPP */
  33               	.LBB15:
  34               	.LBI15:
  35               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2551 2020-10-10 20:33:35Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
  36               		.loc 2 166 1 view .LVU4
  37               	.LBB16:
 167:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	double __tmp ;
  38               		.loc 2 168 2 view .LVU5
 169:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  39               		.loc 2 172 2 view .LVU6
 173:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  40               		.loc 2 173 2 view .LVU7
 174:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  41               		.loc 2 174 2 view .LVU8
 175:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  42               		.loc 2 184 3 view .LVU9
  43               		.loc 2 184 3 is_stmt 0 view .LVU10
  44               	.LBE16:
  45               	.LBE15:
  46               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h"
   1:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /* Copyright (c) 2002,2007-2009 Michael Stumpf
   2:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
   3:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    Portions of documentation Copyright (c) 1990 - 1994
   4:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    The Regents of the University of California.
   5:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    All rights reserved.
   7:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
   8:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    Redistribution and use in source and binary forms, with or without
   9:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    modification, are permitted provided that the following conditions are met:
  10:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  11:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    * Redistributions of source code must retain the above copyright
  12:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****      notice, this list of conditions and the following disclaimer.
  13:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  14:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    * Redistributions in binary form must reproduce the above copyright
  15:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****      notice, this list of conditions and the following disclaimer in
  16:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****      the documentation and/or other materials provided with the
  17:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****      distribution.
  18:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  19:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    * Neither the name of the copyright holders nor the names of
  20:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****      contributors may be used to endorse or promote products derived
  21:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****      from this software without specific prior written permission.
  22:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  23:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  25:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  26:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  27:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  28:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  29:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  30:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  31:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  32:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  33:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****   POSSIBILITY OF SUCH DAMAGE. */
  34:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /* $Id: math.h 2554 2021-05-20 22:22:24Z joerg_wunsch $ */
  36:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  37:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /*
  38:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    math.h - mathematical functions
  39:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  40:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    Author : Michael Stumpf
  41:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****             Michael.Stumpf@t-online.de
  42:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  43:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    __ATTR_CONST__ added by marekm@linux.org.pl for functions
  44:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    that "do not examine any values except their arguments, and have
  45:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    no effects except the return value", for better optimization by gcc.
  46:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****  */
  47:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #ifndef __MATH_H
  49:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define __MATH_H
  50:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  51:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** \file */
  52:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** \defgroup avr_math <math.h>: Mathematics
  53:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     \code #include <math.h> \endcode
  54:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  55:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     This header file declares basic mathematics constants and
  56:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     functions.
  57:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  58:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     \par Notes:
  59:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     - In order to access the functions declared herein, it is usually
  60:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****       also required to additionally link against the library \c libm.a.
  61:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****       See also the related \ref faq_libm "FAQ entry".
  62:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     - Math functions do not raise exceptions and do not change the
  63:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****       \c errno variable. Therefore the majority of them are declared
  64:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****       with const attribute, for better optimization by GCC.	*/
  65:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  66:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  67:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** \ingroup avr_math	*/
  68:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /*@{*/
  69:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The constant \a e.	*/
  71:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_E		2.7182818284590452354
  72:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  73:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The logarithm of the \a e to base 2. */
  74:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_LOG2E		1.4426950408889634074	/* log_2 e */
  75:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  76:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The logarithm of the \a e to base 10. */
  77:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_LOG10E	0.43429448190325182765	/* log_10 e */
  78:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The natural logarithm of the 2.	*/
  80:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_LN2		0.69314718055994530942	/* log_e 2 */
  81:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  82:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The natural logarithm of the 10.	*/
  83:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_LN10		2.30258509299404568402	/* log_e 10 */
  84:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The constant \a pi.	*/
  86:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_PI		3.14159265358979323846	/* pi */
  87:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  88:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The constant \a pi/2.	*/
  89:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_PI_2		1.57079632679489661923	/* pi/2 */
  90:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  91:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The constant \a pi/4.	*/
  92:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_PI_4		0.78539816339744830962	/* pi/4 */
  93:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  94:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The constant \a 1/pi.	*/
  95:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_1_PI		0.31830988618379067154	/* 1/pi */
  96:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The constant \a 2/pi.	*/
  98:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_2_PI		0.63661977236758134308	/* 2/pi */
  99:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 100:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The constant \a 2/sqrt(pi).	*/
 101:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_2_SQRTPI	1.12837916709551257390	/* 2/sqrt(pi) */
 102:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The square root of 2.	*/
 104:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_SQRT2		1.41421356237309504880	/* sqrt(2) */
 105:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 106:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** The constant \a 1/sqrt(2).	*/
 107:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define M_SQRT1_2	0.70710678118654752440	/* 1/sqrt(2) */
 108:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 109:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** NAN constant.	*/
 110:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define NAN	__builtin_nan("")
 111:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 112:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /** INFINITY constant.	*/
 113:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define INFINITY	__builtin_inf()
 114:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 116:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #ifndef __ATTR_CONST__
 117:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** # define __ATTR_CONST__ __attribute__((__const__))
 118:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #endif
 119:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 120:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #if __SIZEOF_DOUBLE__ == __SIZEOF_FLOAT__
 121:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /* In order to provide aliases for double functions in the case where
 122:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    double = float, use declarations with according assembler name.
 123:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    That way:
 124:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    1) We do *NOT* use macros like
 125:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****          #define sin sinf
 126:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****       because that would interfere with C++.  For example, if some class
 127:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****       would implement a method 'sin', or if there was polymorthism for
 128:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****       a function 'sin', then we would silently rename these to 'sinf'.
 129:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    2) We have proper prototypes, both for 'sin' and for 'sinf'.
 130:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****    3) It is zero-overhead.  */
 131:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define __ASM_ALIAS(x) __asm(#x)
 132:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #else
 133:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /* double != float: Provide double prototypes. */
 134:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #define __ASM_ALIAS(x) /* empty */
 135:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #endif
 136:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #ifdef __cplusplus
 138:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** extern "C" {
 139:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** #endif
 140:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 141:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /**
 142:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     The cosf() function returns the cosine of \a __x, measured in radians.
 143:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****  */
 144:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** __ATTR_CONST__ extern float cosf (float __x);
 145:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** __ATTR_CONST__ extern double cos (double __x) __ASM_ALIAS(cosf);		/**< The alias for cosf().	*/
 146:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /**
 148:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     The sinf() function returns the sine of \a __x, measured in radians.
 149:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****  */
 150:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** __ATTR_CONST__ extern float sinf (float __x);
 151:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** __ATTR_CONST__ extern double sin (double __x) __ASM_ALIAS(sinf);		/**< The alias for sinf().	*/
 152:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 153:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /**
 154:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     The tanf() function returns the tangent of \a __x, measured in radians.
 155:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****  */
 156:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** __ATTR_CONST__ extern float tanf (float __x);
 157:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** __ATTR_CONST__ extern double tan (double __x) __ASM_ALIAS(tanf);		/**< The alias for tanf().	*/
 158:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 159:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** /**
 160:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     The fabsf() function computes the absolute value of a floating-point
 161:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     number \a __x.
 162:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****  */
 163:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** static inline float fabsf (float __x)
 164:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** {
 165:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     return __builtin_fabsf (__x);
 166:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** }
 167:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** 
 168:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** static inline double fabs (double __x)
 169:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h **** {
 170:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/math.h ****     return __builtin_fabs (__x);
  47               		.loc 3 170 5 is_stmt 1 view .LVU11
  48               	.LBB18:
  49               	.LBB17:
 185:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  50               		.loc 2 187 2 view .LVU12
  51 0006 2FEF      		ldi r18,lo8(6399999)
  52 0008 87EA      		ldi r24,hi8(6399999)
  53 000a 91E6      		ldi r25,hlo8(6399999)
  54 000c 2150      	1:	subi r18,1
  55 000e 8040      		sbci r24,0
  56 0010 9040      		sbci r25,0
  57 0012 01F4      		brne 1b
  58 0014 00C0      		rjmp .
  59 0016 0000      		nop
  60               	.LVL2:
  61               		.loc 2 187 2 is_stmt 0 view .LVU13
  62               	.LBE17:
  63               	.LBE18:
  82:./tmk_core/common/avr/bootloader.c ****         #endif
  83:./tmk_core/common/avr/bootloader.c **** 
  84:./tmk_core/common/avr/bootloader.c ****         #ifdef PROTOCOL_PJRC
  85:./tmk_core/common/avr/bootloader.c ****             cli();
  86:./tmk_core/common/avr/bootloader.c ****             UDCON = 1;
  87:./tmk_core/common/avr/bootloader.c ****             USBCON = (1<<FRZCLK);
  88:./tmk_core/common/avr/bootloader.c ****             UCSR1B = 0;
  89:./tmk_core/common/avr/bootloader.c ****             _delay_ms(5);
  90:./tmk_core/common/avr/bootloader.c ****         #endif
  91:./tmk_core/common/avr/bootloader.c **** 
  92:./tmk_core/common/avr/bootloader.c ****         // watchdog reset
  93:./tmk_core/common/avr/bootloader.c ****         reset_key = BOOTLOADER_RESET_KEY;
  64               		.loc 1 93 9 is_stmt 1 view .LVU14
  65               		.loc 1 93 19 is_stmt 0 view .LVU15
  66 0018 87E0      		ldi r24,lo8(7)
  67 001a 90EB      		ldi r25,lo8(-80)
  68 001c DC01      		movw r26,r24
  69 001e 8093 0000 		sts reset_key,r24
  70 0022 9093 0000 		sts reset_key+1,r25
  71 0026 A093 0000 		sts reset_key+2,r26
  72 002a B093 0000 		sts reset_key+3,r27
  94:./tmk_core/common/avr/bootloader.c ****         wdt_enable(WDTO_250MS);
  73               		.loc 1 94 9 is_stmt 1 view .LVU16
  74               	.LVL3:
  75               	.LBB19:
  76               	.LBI19:
  77               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h"
   1:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
   5:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
   8:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  11:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  16:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  20:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  32:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** /* $Id: wdt.h 2522 2016-04-20 05:43:23Z joerg_wunsch $ */
  33:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  34:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** /*
  35:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****  */
  37:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  41:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  57:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     the following:
  68:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  69:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     \code
  70:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  73:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  75:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     {
  80:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     }
  84:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     \endcode
  85:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  86:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** */
  91:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  92:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** /**
  93:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** */
  98:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
  99:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 101:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #else
 106:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #endif
 108:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 109:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #else
 114:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #endif
 116:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 117:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #else
 120:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #endif
 122:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 123:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 125:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** /**
 127:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 134:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** */
 136:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 138:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 140:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** /*
 141:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** */
 152:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** do { \
 154:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** ); \
 174:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** } while(0)
 175:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : \
 184:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** );
 191:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 192:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 194:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** )
 210:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 211:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** do { \
 213:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** ); \
 231:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** }while(0)
 232:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 233:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 235:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** static __inline__
 236:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** {
 239:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 241:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			);
 256:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 257:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 259:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			);
 274:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 275:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 277:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			);
 292:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 293:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	else
 294:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****  	{
 295:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 			);
 310:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 311:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** }
 312:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 313:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** static __inline__
 314:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** {
 317:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 319:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				);
 337:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 338:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 340:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				);
 358:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 359:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 361:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				);
 379:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 380:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	else
 381:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 382:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				);
 400:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 401:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** }
 402:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 403:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** #else
 404:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 405:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** static __inline__
 406:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
  78               		.loc 4 407 6 view .LVU17
  79               	.LBB20:
 408:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** {
 409:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
  80               		.loc 4 409 2 view .LVU18
 410:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 411:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		);
 425:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 426:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	else
 427:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 428:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
  81               		.loc 4 428 3 view .LVU19
  82 002e 88E1      		ldi r24,lo8(24)
  83 0030 9CE0      		ldi r25,lo8(12)
  84               	/* #APP */
  85               	 ;  428 "/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h" 1
  86 0032 0FB6      		in __tmp_reg__,__SREG__
  87 0034 F894      		cli
  88 0036 A895      		wdr
  89 0038 8093 6000 		sts 96, r24
  90 003c 0FBE      		out __SREG__,__tmp_reg__
  91 003e 9093 6000 		sts 96, r25
  92               	 	
  93               	 ;  0 "" 2
  94               	/* #NOAPP */
  95               	.L2:
  96               	.LBE20:
  97               	.LBE19:
  95:./tmk_core/common/avr/bootloader.c ****         for (;;);
  98               		.loc 1 95 9 discriminator 1 view .LVU20
  99               		.loc 1 95 17 discriminator 1 view .LVU21
 100               		.loc 1 95 15 discriminator 1 view .LVU22
 101 0042 00C0      		rjmp .L2
 102               		.cfi_endproc
 103               	.LFE106:
 105               		.section	.init3,"ax",@progbits
 106               	.global	bootloader_jump_after_watchdog_reset
 108               	bootloader_jump_after_watchdog_reset:
 109               	.LFB107:
  96:./tmk_core/common/avr/bootloader.c **** 
  97:./tmk_core/common/avr/bootloader.c ****     #else
  98:./tmk_core/common/avr/bootloader.c ****         // this block may be optional
  99:./tmk_core/common/avr/bootloader.c ****         // TODO: figure it out
 100:./tmk_core/common/avr/bootloader.c **** 
 101:./tmk_core/common/avr/bootloader.c ****         uint16_t *const bootKeyPtr = (uint16_t *)0x0800;
 102:./tmk_core/common/avr/bootloader.c **** 
 103:./tmk_core/common/avr/bootloader.c ****         // Value used by Caterina bootloader use to determine whether to run the
 104:./tmk_core/common/avr/bootloader.c ****         // sketch or the bootloader programmer.
 105:./tmk_core/common/avr/bootloader.c ****         uint16_t bootKey = 0x7777;
 106:./tmk_core/common/avr/bootloader.c **** 
 107:./tmk_core/common/avr/bootloader.c ****         *bootKeyPtr = bootKey;
 108:./tmk_core/common/avr/bootloader.c **** 
 109:./tmk_core/common/avr/bootloader.c ****         // setup watchdog timeout
 110:./tmk_core/common/avr/bootloader.c ****         wdt_enable(WDTO_60MS);
 111:./tmk_core/common/avr/bootloader.c **** 
 112:./tmk_core/common/avr/bootloader.c ****         while(1) {} // wait for watchdog timer to trigger
 113:./tmk_core/common/avr/bootloader.c **** 
 114:./tmk_core/common/avr/bootloader.c ****     #endif
 115:./tmk_core/common/avr/bootloader.c **** }
 116:./tmk_core/common/avr/bootloader.c **** 
 117:./tmk_core/common/avr/bootloader.c **** /* this runs before main() */
 118:./tmk_core/common/avr/bootloader.c **** void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
 119:./tmk_core/common/avr/bootloader.c **** void bootloader_jump_after_watchdog_reset(void)
 120:./tmk_core/common/avr/bootloader.c **** {
 110               		.loc 1 120 1 view -0
 111               		.cfi_startproc
 112               	/* prologue: naked */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
 121:./tmk_core/common/avr/bootloader.c ****     if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
 116               		.loc 1 121 5 view .LVU24
 117               		.loc 1 121 8 is_stmt 0 view .LVU25
 118 0000 04B6      		in __tmp_reg__,0x34
 119 0002 03FE      		sbrs __tmp_reg__,3
 120 0004 00C0      		rjmp .L3
 121               		.loc 1 121 29 discriminator 1 view .LVU26
 122 0006 8091 0000 		lds r24,reset_key
 123 000a 9091 0000 		lds r25,reset_key+1
 124 000e A091 0000 		lds r26,reset_key+2
 125 0012 B091 0000 		lds r27,reset_key+3
 126 0016 8730      		cpi r24,7
 127 0018 904B      		sbci r25,-80
 128 001a A740      		sbci r26,7
 129 001c B04B      		sbci r27,-80
 130 001e 01F4      		brne .L3
 122:./tmk_core/common/avr/bootloader.c ****         reset_key = 0;
 131               		.loc 1 122 9 is_stmt 1 view .LVU27
 132               		.loc 1 122 19 is_stmt 0 view .LVU28
 133 0020 1092 0000 		sts reset_key,__zero_reg__
 134 0024 1092 0000 		sts reset_key+1,__zero_reg__
 135 0028 1092 0000 		sts reset_key+2,__zero_reg__
 136 002c 1092 0000 		sts reset_key+3,__zero_reg__
 123:./tmk_core/common/avr/bootloader.c **** 
 124:./tmk_core/common/avr/bootloader.c ****         // My custom USBasploader requires this to come up.
 125:./tmk_core/common/avr/bootloader.c ****         MCUSR = 0;
 137               		.loc 1 125 9 is_stmt 1 view .LVU29
 138               		.loc 1 125 15 is_stmt 0 view .LVU30
 139 0030 14BE      		out 0x34,__zero_reg__
 126:./tmk_core/common/avr/bootloader.c **** 
 127:./tmk_core/common/avr/bootloader.c ****         // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
 128:./tmk_core/common/avr/bootloader.c ****         MCUSR &= ~(1<<WDRF);
 140               		.loc 1 128 9 is_stmt 1 view .LVU31
 141               		.loc 1 128 15 is_stmt 0 view .LVU32
 142 0032 84B7      		in r24,0x34
 143 0034 877F      		andi r24,lo8(-9)
 144 0036 84BF      		out 0x34,r24
 129:./tmk_core/common/avr/bootloader.c ****         wdt_disable();
 145               		.loc 1 129 9 is_stmt 1 view .LVU33
 146               	.LBB21:
 147               	.LBI21:
 429:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		);
 442:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 443:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** }
 444:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 
 445:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** static __inline__
 446:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** void wdt_disable (void)
 148               		.loc 4 447 6 view .LVU34
 149               	.LBE21:
 448:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** {
 449:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 150               		.loc 4 449 2 view .LVU35
 151               	.LBB23:
 152               	.LBB22:
 450:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 451:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		);
 466:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	}
 467:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	else
 468:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 	{
 469:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 153               		.loc 4 469 9 view .LVU36
 470:/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 154               		.loc 4 470 3 view .LVU37
 155               	/* #APP */
 156               	 ;  470 "/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/avr/wdt.h" 1
 157 0038 0FB6      		in __tmp_reg__,__SREG__
 158 003a F894      		cli
 159 003c A895      		wdr
 160 003e 8091 6000 		lds r24,96
 161 0042 8861      		ori r24,24
 162 0044 8093 6000 		sts 96,r24
 163 0048 1092 6000 		sts 96,__zero_reg__
 164 004c 0FBE      		out __SREG__,__tmp_reg__
 165               		
 166               	 ;  0 "" 2
 167               	/* #NOAPP */
 168               	.LBE22:
 169               	.LBE23:
 130:./tmk_core/common/avr/bootloader.c **** 
 131:./tmk_core/common/avr/bootloader.c ****         // This is compled into 'icall', address should be in word unit, not byte.
 132:./tmk_core/common/avr/bootloader.c ****         ((void (*)(void))(BOOTLOADER_START/2))();
 170               		.loc 1 132 9 view .LVU38
 171 004e E0E0      		ldi r30,0
 172 0050 F8E3      		ldi r31,lo8(56)
 173 0052 0995      		icall
 174               	.LVL4:
 175               	.L3:
 176               	/* epilogue start */
 133:./tmk_core/common/avr/bootloader.c ****     }
 134:./tmk_core/common/avr/bootloader.c **** }
 177               		.loc 1 134 1 is_stmt 0 view .LVU39
 178               		.cfi_endproc
 179               	.LFE107:
 181               	.global	reset_key
 182               		.section	.noinit,"aw"
 185               	reset_key:
 186 0000 0000 0000 		.zero	4
 187               		.text
 188               	.Letext0:
 189               		.file 5 "/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/stdint.h"
 190               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 191               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 192               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 193               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 194               		.file 10 "/usr/local/Cellar/avr-gcc@8/8.5.0_1/avr/include/stdio.h"
 195               		.file 11 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bootloader.c
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:2      *ABS*:0000003e __SP_H__
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:3      *ABS*:0000003d __SP_L__
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:4      *ABS*:0000003f __SREG__
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:6      *ABS*:00000001 __zero_reg__
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:13     .text.bootloader_jump:00000000 bootloader_jump
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:16     .text.bootloader_jump:00000000 .Loc.0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:17     .text.bootloader_jump:00000000 L0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:22     .text.bootloader_jump:00000000 .Loc.1
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:25     .text.bootloader_jump:00000004 .Loc.2
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:30     .text.bootloader_jump:00000006 .Loc.3
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:36     .text.bootloader_jump:00000006 .Loc.4
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:38     .text.bootloader_jump:00000006 .Loc.5
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:39     .text.bootloader_jump:00000006 .Loc.6
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:40     .text.bootloader_jump:00000006 .Loc.7
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:41     .text.bootloader_jump:00000006 .Loc.8
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:42     .text.bootloader_jump:00000006 .Loc.9
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:43     .text.bootloader_jump:00000006 .Loc.10
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:47     .text.bootloader_jump:00000006 .Loc.11
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:50     .text.bootloader_jump:00000006 .Loc.12
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:58     .text.bootloader_jump:00000016 L0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:61     .text.bootloader_jump:00000018 .Loc.13
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:64     .text.bootloader_jump:00000018 .Loc.14
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:65     .text.bootloader_jump:00000018 .Loc.15
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:185    .noinit:00000000 reset_key
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:73     .text.bootloader_jump:0000002e .Loc.16
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:78     .text.bootloader_jump:0000002e .Loc.17
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:80     .text.bootloader_jump:0000002e .Loc.18
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:81     .text.bootloader_jump:0000002e .Loc.19
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:98     .text.bootloader_jump:00000042 .Loc.20
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:99     .text.bootloader_jump:00000042 .Loc.21
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:100    .text.bootloader_jump:00000042 .Loc.22
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:102    .text.bootloader_jump:00000044 L0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:108    .init3:00000000 bootloader_jump_after_watchdog_reset
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:110    .init3:00000000 .Loc.23
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:111    .init3:00000000 L0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:116    .init3:00000000 .Loc.24
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:117    .init3:00000000 .Loc.25
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:121    .init3:00000006 .Loc.26
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:131    .init3:00000020 .Loc.27
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:132    .init3:00000020 .Loc.28
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:137    .init3:00000030 .Loc.29
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:138    .init3:00000030 .Loc.30
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:140    .init3:00000032 .Loc.31
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:141    .init3:00000032 .Loc.32
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:145    .init3:00000038 .Loc.33
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:148    .init3:00000038 .Loc.34
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:150    .init3:00000038 .Loc.35
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:153    .init3:00000038 .Loc.36
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:154    .init3:00000038 .Loc.37
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:170    .init3:0000004e .Loc.38
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:177    .init3:00000054 .Loc.39
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:178    .init3:00000054 L0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:105    .text.bootloader_jump:00000044 L0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:182    .init3:00000054 L0
                     .debug_frame:00000000 L0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:54     .text.bootloader_jump:0000000c .L11
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:95     .text.bootloader_jump:00000042 .L2
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:175    .init3:00000054 .L3
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:727    .debug_abbrev:00000000 .Ldebug_abbrev0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:1388   .debug_ranges:00000000 .Ldebug_ranges0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:1408   .debug_line:00000000 .Ldebug_line0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:109    .init3:00000000 .LFB107
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:179    .init3:00000054 .LFE107
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:147    .init3:00000038 .LBI21
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:152    .init3:00000038 .LBB22
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:168    .init3:0000004e .LBE22
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:174    .init3:00000054 .LVL4
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:14     .text.bootloader_jump:00000000 .LFB106
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:103    .text.bootloader_jump:00000044 .LFE106
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:34     .text.bootloader_jump:00000006 .LBI15
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:1340   .debug_loc:00000002 .LLST0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:1337   .debug_loc:00000000 .LVUS0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:1352   .debug_loc:0000001c .LLST1
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:1349   .debug_loc:0000001a .LVUS1
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:1364   .debug_loc:00000036 .LLST2
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:1361   .debug_loc:00000034 .LVUS2
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:76     .text.bootloader_jump:0000002e .LBI19
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:75     .text.bootloader_jump:0000002e .LBB19
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:97     .text.bootloader_jump:00000042 .LBE19
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:24     .text.bootloader_jump:00000004 .LVL0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:31     .text.bootloader_jump:00000006 .LVL1
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:60     .text.bootloader_jump:00000018 .LVL2
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:197    .debug_info:00000000 .Ldebug_info0
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:33     .text.bootloader_jump:00000006 .LBB15
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:45     .text.bootloader_jump:00000006 .LBE15
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:48     .text.bootloader_jump:00000006 .LBB18
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:63     .text.bootloader_jump:00000018 .LBE18
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:146    .init3:00000038 .LBB21
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:149    .init3:00000038 .LBE21
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:151    .init3:00000038 .LBB23
/var/folders/f1/r0m_vh_54tg0jls9tjh4vqkr0000gn/T//ccg5SVkl.s:169    .init3:0000004e .LBE23

UNDEFINED SYMBOLS
USB_Disable
