
uarttest.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 3294 	movel #12948,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,3720 <SAVE_PROG_EXIT>
    2048:	3720 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 30c8 	lea 30c8 <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 20c4 	lea 20c4 <_postinit_end>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 3720 	movel 3720 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 30f4 	lea 30f4 <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 3290 	lea 3290 <crbuf>,%a2
    208a:	47f9 0000 3290 	lea 3290 <crbuf>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 3290 	lea 3290 <crbuf>,%a2
    20ac:	47f9 0000 3290 	lea 3290 <crbuf>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <kmain>:

static RingBuffer uart_b;
static CharDevice device;
uint8_t buf;

void kmain() {
    20c4:	48e7 3038      	moveml %d2-%d3/%a2-%a4,%sp@-
    int i = 0;
    int n = 1;

    printf("Install handlers\n");
    20c8:	4879 0000 320e 	pea 320e <__mulsi3+0x22>
    20ce:	45f9 0000 2ffa 	lea 2ffa <printf_>,%a2
    20d4:	4e92           	jsr %a2@

    if (!mcCheckDeviceSupport()) {
    20d6:	4eb9 0000 3076 	jsr 3076 <mcCheckDeviceSupport>
    20dc:	588f           	addql #4,%sp
    20de:	4a00           	tstb %d0
    20e0:	6700 00e4      	beqw 21c6 <kmain+0x102>
        printf("ERROR: No device support\n");
        return;
    }

    if (mcGetDeviceCount() < 2) {
    20e4:	4eb9 0000 308c 	jsr 308c <mcGetDeviceCount>
    20ea:	0c00 0001      	cmpib #1,%d0
    20ee:	6300 00e6      	blsw 21d6 <kmain+0x112>
        printf("ERROR: Insufficient devices\n");
        return;
    }

    if (!mcGetDevice(1, &device)) {
    20f2:	4879 0000 3296 	pea 3296 <device>
    20f8:	4878 0001      	pea 1 <ROSCO_M68K>
    20fc:	4eb9 0000 3096 	jsr 3096 <mcGetDevice>
    2102:	508f           	addql #8,%sp
    2104:	4a00           	tstb %d0
    2106:	6700 00de      	beqw 21e6 <kmain+0x122>
        printf("ERROR: Unable to get device\n");
        return;
    }

    duart_install_interrupt(&device, NULL, &uart_b);
    210a:	4879 0000 32b6 	pea 32b6 <uart_b>
    2110:	42a7           	clrl %sp@-
    2112:	4879 0000 3296 	pea 3296 <device>
    2118:	4eb9 0000 2288 	jsr 2288 <duart_install_interrupt>

    printf("Righto, that's done...\n");
    211e:	4879 0000 3274 	pea 3274 <__mulsi3+0x88>
    2124:	4e92           	jsr %a2@
    2126:	4fef 0010      	lea %sp@(16),%sp

    int led_on = 0;
    212a:	7600           	moveq #0,%d3

    while (true) {
        if (i++ == 3) {
    212c:	7401           	moveq #1,%d2
    212e:	47f9 0000 30b6 	lea 30b6 <mcSendDevice>,%a3
    2134:	49f9 0000 30a8 	lea 30a8 <mcReadDevice>,%a4
                led_on = 1;
            }
            i = 0;
        }

        buf = mcReadDevice(&device);
    213a:	4879 0000 3296 	pea 3296 <device>
    2140:	4e94           	jsr %a4@
    2142:	13c0 0000 3294 	moveb %d0,3294 <buf>
        // n = duart_unbuffer_one(&uart_b, &buf);

        if (n) {
            printf("%c", buf);
    2148:	0280 0000 00ff 	andil #255,%d0
    214e:	2f00           	movel %d0,%sp@-
    2150:	4879 0000 328c 	pea 328c <__mulsi3+0xa0>
    2156:	4e92           	jsr %a2@
        if (i++ == 3) {
    2158:	4fef 000c      	lea %sp@(12),%sp
    215c:	7003           	moveq #3,%d0
    215e:	b082           	cmpl %d2,%d0
    2160:	672a           	beqs 218c <kmain+0xc8>
    2162:	5282           	addql #1,%d2
        buf = mcReadDevice(&device);
    2164:	4879 0000 3296 	pea 3296 <device>
    216a:	4e94           	jsr %a4@
    216c:	13c0 0000 3294 	moveb %d0,3294 <buf>
            printf("%c", buf);
    2172:	0280 0000 00ff 	andil #255,%d0
    2178:	2f00           	movel %d0,%sp@-
    217a:	4879 0000 328c 	pea 328c <__mulsi3+0xa0>
    2180:	4e92           	jsr %a2@
        if (i++ == 3) {
    2182:	4fef 000c      	lea %sp@(12),%sp
    2186:	7003           	moveq #3,%d0
    2188:	b082           	cmpl %d2,%d0
    218a:	66d6           	bnes 2162 <kmain+0x9e>
            mcSendDevice(0x5, &device);
    218c:	4879 0000 3296 	pea 3296 <device>
    2192:	4878 0005      	pea 5 <DUART_CRA+0x1>
    2196:	4e93           	jsr %a3@
            if (led_on) {
    2198:	508f           	addql #8,%sp
    219a:	4a83           	tstl %d3
    219c:	6712           	beqs 21b0 <kmain+0xec>
                mcSendDevice(0, &device);
    219e:	4879 0000 3296 	pea 3296 <device>
    21a4:	42a7           	clrl %sp@-
    21a6:	4e93           	jsr %a3@
                led_on = 0;
    21a8:	508f           	addql #8,%sp
    21aa:	7600           	moveq #0,%d3
            i = 0;
    21ac:	7400           	moveq #0,%d2
    21ae:	608a           	bras 213a <kmain+0x76>
                mcSendDevice((unsigned char)255, &device);
    21b0:	4879 0000 3296 	pea 3296 <device>
    21b6:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    21ba:	4e93           	jsr %a3@
    21bc:	508f           	addql #8,%sp
            i = 0;
    21be:	7400           	moveq #0,%d2
                led_on = 1;
    21c0:	7601           	moveq #1,%d3
    21c2:	6000 ff76      	braw 213a <kmain+0x76>
        printf("ERROR: No device support\n");
    21c6:	4879 0000 3220 	pea 3220 <__mulsi3+0x34>
    21cc:	4e92           	jsr %a2@
        return;
    21ce:	588f           	addql #4,%sp
        }
    }
}
    21d0:	4cdf 1c0c      	moveml %sp@+,%d2-%d3/%a2-%a4
    21d4:	4e75           	rts
        printf("ERROR: Insufficient devices\n");
    21d6:	4879 0000 323a 	pea 323a <__mulsi3+0x4e>
    21dc:	4e92           	jsr %a2@
        return;
    21de:	588f           	addql #4,%sp
}
    21e0:	4cdf 1c0c      	moveml %sp@+,%d2-%d3/%a2-%a4
    21e4:	4e75           	rts
        printf("ERROR: Unable to get device\n");
    21e6:	4879 0000 3257 	pea 3257 <__mulsi3+0x6b>
    21ec:	4e92           	jsr %a2@
        return;
    21ee:	588f           	addql #4,%sp
}
    21f0:	4cdf 1c0c      	moveml %sp@+,%d2-%d3/%a2-%a4
    21f4:	4e75           	rts
	...

000021f8 <duart_buffer_char>:
    21f8:	48e7 6080      	moveml %d1-%d2/%a0,%sp@-
    21fc:	41ea 0006      	lea %a2@(6),%a0
    2200:	322a 0002      	movew %a2@(2),%d1
    2204:	342a 0004      	movew %a2@(4),%d2
    2208:	1180 1000      	moveb %d0,%a0@(0000000000000000,%d1:w)
    220c:	5241           	addqw #1,%d1
    220e:	c242           	andw %d2,%d1
    2210:	3541 0002      	movew %d1,%a2@(2)
    2214:	4cdf 0106      	moveml %sp@+,%d1-%d2/%a0
    2218:	4e75           	rts

0000221a <duart_unbuffer>:
    221a:	48e7 78c0      	moveml %d1-%d4/%a0-%a1,%sp@-
    221e:	40c4           	movew %sr,%d4
    2220:	007c 0700      	oriw #1792,%sr
    2224:	206f 001c      	moveal %sp@(28),%a0
    2228:	226f 0020      	moveal %sp@(32),%a1
    222c:	7000           	moveq #0,%d0
    222e:	3218           	movew %a0@+,%d1
    2230:	3418           	movew %a0@+,%d2
    2232:	3618           	movew %a0@+,%d3
    2234:	b242           	cmpw %d2,%d1
    2236:	670c           	beqs 2244 <duart_unbuffer+0x2a>
    2238:	12f0 1000      	moveb %a0@(0000000000000000,%d1:w),%a1@+
    223c:	5240           	addqw #1,%d0
    223e:	5241           	addqw #1,%d1
    2240:	c243           	andw %d3,%d1
    2242:	60f0           	bras 2234 <duart_unbuffer+0x1a>
    2244:	206f 001c      	moveal %sp@(28),%a0
    2248:	3081           	movew %d1,%a0@
    224a:	46c4           	movew %d4,%sr
    224c:	4cdf 031e      	moveml %sp@+,%d1-%d4/%a0-%a1
    2250:	4e75           	rts

00002252 <duart_unbuffer_one>:
    2252:	48e7 78c0      	moveml %d1-%d4/%a0-%a1,%sp@-
    2256:	40c4           	movew %sr,%d4
    2258:	007c 0700      	oriw #1792,%sr
    225c:	206f 001c      	moveal %sp@(28),%a0
    2260:	226f 0020      	moveal %sp@(32),%a1
    2264:	7000           	moveq #0,%d0
    2266:	3218           	movew %a0@+,%d1
    2268:	3418           	movew %a0@+,%d2
    226a:	3618           	movew %a0@+,%d3
    226c:	b242           	cmpw %d2,%d1
    226e:	6710           	beqs 2280 <duart_unbuffer_one+0x2e>
    2270:	12f0 1000      	moveb %a0@(0000000000000000,%d1:w),%a1@+
    2274:	5240           	addqw #1,%d0
    2276:	5241           	addqw #1,%d1
    2278:	c243           	andw %d3,%d1
    227a:	206f 001c      	moveal %sp@(28),%a0
    227e:	3081           	movew %d1,%a0@
    2280:	46c4           	movew %d4,%sr
    2282:	4cdf 031e      	moveml %sp@+,%d1-%d4/%a0-%a1
    2286:	4e75           	rts

00002288 <duart_install_interrupt>:
    2288:	48e7 80c0      	moveml %d0/%a0-%a1,%sp@-
    228c:	40c0           	movew %sr,%d0
    228e:	007c 0700      	oriw #1792,%sr
    2292:	206f 0010      	moveal %sp@(16),%a0
    2296:	2050           	moveal %a0@,%a0
    2298:	226f 0014      	moveal %sp@(20),%a1
    229c:	23c9 0000 36bc 	movel %a1,36bc <RINGBUF_A>
    22a2:	6714           	beqs 22b8 <duart_install_interrupt+0x30>
    22a4:	117c 0088 0002 	moveb #-120,%a0@(2)
    22aa:	117c 0010 0004 	moveb #16,%a0@(4)
    22b0:	10bc 0013      	moveb #19,%a0@
    22b4:	10bc 0007      	moveb #7,%a0@
    22b8:	226f 0018      	moveal %sp@(24),%a1
    22bc:	23c9 0000 36c0 	movel %a1,36c0 <RINGBUF_B>
    22c2:	6718           	beqs 22dc <duart_install_interrupt+0x54>
    22c4:	117c 0088 0012 	moveb #-120,%a0@(18)
    22ca:	117c 0010 0014 	moveb #16,%a0@(20)
    22d0:	117c 0013 0010 	moveb #19,%a0@(16)
    22d6:	117c 0007 0010 	moveb #7,%a0@(16)
    22dc:	23c8 0000 36c4 	movel %a0,36c4 <BASEADDR>
    22e2:	23f8 0114 0000 	movel 114 <VECADDR>,36c8 <CHAIN>
    22e8:	36c8 
    22ea:	21fc 0000 2326 	movel #8998,114 <VECADDR>
    22f0:	0114 
    22f2:	117c 0028 000a 	moveb #40,%a0@(10)
    22f8:	46c0           	movew %d0,%sr
    22fa:	4cdf 0301      	moveml %sp@+,%d0/%a0-%a1
    22fe:	4e75           	rts

00002300 <duart_remove_interrupt>:
    2300:	48e7 80c0      	moveml %d0/%a0-%a1,%sp@-
    2304:	40c0           	movew %sr,%d0
    2306:	007c 0700      	oriw #1792,%sr
    230a:	21f9 0000 36c8 	movel 36c8 <CHAIN>,114 <VECADDR>
    2310:	0114 
    2312:	2079 0000 36c4 	moveal 36c4 <BASEADDR>,%a0
    2318:	117c 0008 000a 	moveb #8,%a0@(10)
    231e:	46c0           	movew %d0,%sr
    2320:	4cdf 0301      	moveml %sp@+,%d0/%a0-%a1
    2324:	4e75           	rts

00002326 <HANDLER>:
    2326:	48e7 c0e0      	moveml %d0-%d1/%a0-%a2,%sp@-
    232a:	4279 0000 371c 	clrw 371c <INTR_FLAG>
    2330:	2079 0000 36c4 	moveal 36c4 <BASEADDR>,%a0
    2336:	43f9 0000 21f8 	lea 21f8 <duart_buffer_char>,%a1
    233c:	2479 0000 36bc 	moveal 36bc <RINGBUF_A>,%a2
    2342:	b4fc 0000      	cmpaw #0,%a2
    2346:	672e           	beqs 2376 <HANDLER+0x50>
    2348:	1028 000a      	moveb %a0@(10),%d0
    234c:	0800 0001      	btst #1,%d0
    2350:	6724           	beqs 2376 <HANDLER+0x50>
    2352:	1038 0002      	moveb 2 <DUART_CSRA>,%d0
    2356:	c03c 00f0      	andb #-16,%d0
    235a:	6702           	beqs 235e <HANDLER+0x38>
    235c:	6108           	bsrs 2366 <HANDLER+0x40>
    235e:	1028 0006      	moveb %a0@(6),%d0
    2362:	4e91           	jsr %a1@
    2364:	60e2           	bras 2348 <HANDLER+0x22>
    2366:	1200           	moveb %d0,%d1
    2368:	0801 0004      	btst #4,%d1
    236c:	6706           	beqs 2374 <HANDLER+0x4e>
    236e:	117c 0040 0004 	moveb #64,%a0@(4)
    2374:	4e75           	rts
    2376:	2479 0000 36c0 	moveal 36c0 <RINGBUF_B>,%a2
    237c:	b4fc 0000      	cmpaw #0,%a2
    2380:	6700 0022      	beqw 23a4 <HANDLER+0x7e>
    2384:	1028 000a      	moveb %a0@(10),%d0
    2388:	0800 0005      	btst #5,%d0
    238c:	6716           	beqs 23a4 <HANDLER+0x7e>
    238e:	1038 0012      	moveb 12 <DUART_CSRB>,%d0
    2392:	c03c 00f0      	andb #-16,%d0
    2396:	6702           	beqs 239a <HANDLER+0x74>
    2398:	61cc           	bsrs 2366 <HANDLER+0x40>
    239a:	1028 0016      	moveb %a0@(22),%d0
    239e:	4e91           	jsr %a1@
    23a0:	6000 ffe2      	braw 2384 <HANDLER+0x5e>
    23a4:	4cdf 0703      	moveml %sp@+,%d0-%d1/%a0-%a2
    23a8:	2f39 0000 36c8 	movel 36c8 <CHAIN>,%sp@-
    23ae:	4e75           	rts

000023b0 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    23b0:	4e75           	rts

000023b2 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    23b2:	4fef ffd0      	lea %sp@(-48),%sp
    23b6:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    23ba:	266f 0060      	moveal %sp@(96),%a3
    23be:	2a2f 0064      	movel %sp@(100),%d5
    23c2:	2c2f 006c      	movel %sp@(108),%d6
    23c6:	262f 0070      	movel %sp@(112),%d3
    23ca:	282f 0078      	movel %sp@(120),%d4
    23ce:	1f6f 0077 0037 	moveb %sp@(119),%sp@(55)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    23d4:	222f 0084      	movel %sp@(132),%d1
    23d8:	0281 0000 0400 	andil #1024,%d1
    23de:	2f41 002e      	movel %d1,%sp@(46)
  if (!value) {
    23e2:	4a83           	tstl %d3
    23e4:	6600 0180      	bnew 2566 <_ntoa_long+0x1b4>
    flags &= ~FLAGS_HASH;
    23e8:	70ef           	moveq #-17,%d0
    23ea:	c0af 0084      	andl %sp@(132),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    23ee:	4a81           	tstl %d1
    23f0:	6600 01b2      	bnew 25a4 <_ntoa_long+0x1f2>
    23f4:	42af 0032      	clrl %sp@(50)
    flags &= ~FLAGS_HASH;
    23f8:	2f40 0084      	movel %d0,%sp@(132)
    23fc:	082f 0005 0087 	btst #5,%sp@(135)
    2402:	6600 0176      	bnew 257a <_ntoa_long+0x1c8>
    2406:	7061           	moveq #97,%d0
    2408:	4def 005c      	lea %sp@(92),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    240c:	45ef 003c      	lea %sp@(60),%a2
    2410:	4bf9 0000 31bc 	lea 31bc <__umodsi3>,%a5
    2416:	7e21           	moveq #33,%d7
    2418:	9e8e           	subl %fp,%d7
    241a:	49f9 0000 3160 	lea 3160 <__udivsi3>,%a4
    2420:	1200           	moveb %d0,%d1
    2422:	0601 fff6      	addib #-10,%d1
    2426:	2f45 0038      	movel %d5,%sp@(56)
    242a:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    242c:	2f04           	movel %d4,%sp@-
    242e:	2f03           	movel %d3,%sp@-
    2430:	4e95           	jsr %a5@
    2432:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2434:	7209           	moveq #9,%d1
    2436:	b280           	cmpl %d0,%d1
    2438:	652c           	bcss 2466 <_ntoa_long+0xb4>
    243a:	0600 0030      	addib #48,%d0
    243e:	2407           	movel %d7,%d2
    2440:	d48a           	addl %a2,%d2
    2442:	14c0           	moveb %d0,%a2@+
      value /= base;
    2444:	2f04           	movel %d4,%sp@-
    2446:	2f03           	movel %d3,%sp@-
    2448:	4e94           	jsr %a4@
    244a:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    244c:	b883           	cmpl %d3,%d4
    244e:	622a           	bhis 247a <_ntoa_long+0xc8>
    2450:	bdca           	cmpal %a2,%fp
    2452:	6700 0280      	beqw 26d4 <_ntoa_long+0x322>
      value /= base;
    2456:	2600           	movel %d0,%d3
      const char digit = (char)(value % base);
    2458:	2f04           	movel %d4,%sp@-
    245a:	2f03           	movel %d3,%sp@-
    245c:	4e95           	jsr %a5@
    245e:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2460:	7209           	moveq #9,%d1
    2462:	b280           	cmpl %d0,%d1
    2464:	64d4           	bccs 243a <_ntoa_long+0x88>
    2466:	d005           	addb %d5,%d0
    2468:	2407           	movel %d7,%d2
    246a:	d48a           	addl %a2,%d2
    246c:	14c0           	moveb %d0,%a2@+
      value /= base;
    246e:	2f04           	movel %d4,%sp@-
    2470:	2f03           	movel %d3,%sp@-
    2472:	4e94           	jsr %a4@
    2474:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2476:	b883           	cmpl %d3,%d4
    2478:	63d6           	blss 2450 <_ntoa_long+0x9e>
    247a:	2a2f 0038      	movel %sp@(56),%d5
  if (!(flags & FLAGS_LEFT)) {
    247e:	7602           	moveq #2,%d3
    2480:	c6af 0084      	andl %sp@(132),%d3
    2484:	082f 0001 0087 	btst #1,%sp@(135)
    248a:	6700 0132      	beqw 25be <_ntoa_long+0x20c>
  if (flags & FLAGS_HASH) {
    248e:	4aaf 0032      	tstl %sp@(50)
    2492:	6700 01f2      	beqw 2686 <_ntoa_long+0x2d4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2496:	4aaf 002e      	tstl %sp@(46)
    249a:	6600 01ca      	bnew 2666 <_ntoa_long+0x2b4>
    249e:	4a82           	tstl %d2
    24a0:	6600 01b4      	bnew 2656 <_ntoa_long+0x2a4>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    24a4:	7010           	moveq #16,%d0
    24a6:	b084           	cmpl %d4,%d0
    24a8:	6700 0328      	beqw 27d2 <_ntoa_long+0x420>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    24ac:	5584           	subql #2,%d4
    24ae:	6700 035c      	beqw 280c <_ntoa_long+0x45a>
      buf[len++] = '0';
    24b2:	1f7c 0030 003c 	moveb #48,%sp@(60)
    24b8:	7401           	moveq #1,%d2
    if (negative) {
    24ba:	4a2f 0037      	tstb %sp@(55)
    24be:	6700 01e4      	beqw 26a4 <_ntoa_long+0x2f2>
      buf[len++] = '-';
    24c2:	1fbc 002d 283c 	moveb #45,%sp@(000000000000003c,%d2:l)
    24c8:	5282           	addql #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    24ca:	7003           	moveq #3,%d0
    24cc:	c0af 0084      	andl %sp@(132),%d0
    24d0:	6600 01c4      	bnew 2696 <_ntoa_long+0x2e4>
    for (size_t i = len; i < width; i++) {
    24d4:	b4af 0080      	cmpl %sp@(128),%d2
    24d8:	6400 01bc      	bccw 2696 <_ntoa_long+0x2e4>
    24dc:	2e2f 0068      	movel %sp@(104),%d7
    24e0:	deaf 0080      	addl %sp@(128),%d7
    24e4:	9e82           	subl %d2,%d7
    24e6:	246f 0068      	moveal %sp@(104),%a2
      out(' ', buffer, idx++, maxlen);
    24ea:	200a           	movel %a2,%d0
    24ec:	528a           	addql #1,%a2
    24ee:	2f06           	movel %d6,%sp@-
    24f0:	2f00           	movel %d0,%sp@-
    24f2:	2f05           	movel %d5,%sp@-
    24f4:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    24f8:	4e93           	jsr %a3@
    for (size_t i = len; i < width; i++) {
    24fa:	4fef 0010      	lea %sp@(16),%sp
    24fe:	b5c7           	cmpal %d7,%a2
    2500:	66e8           	bnes 24ea <_ntoa_long+0x138>
  while (len) {
    2502:	4a82           	tstl %d2
    2504:	6700 0236      	beqw 273c <_ntoa_long+0x38a>
    2508:	45f7 283c      	lea %sp@(000000000000003c,%d2:l),%a2
    250c:	de82           	addl %d2,%d7
    250e:	2807           	movel %d7,%d4
    2510:	2007           	movel %d7,%d0
    2512:	9082           	subl %d2,%d0
    out(buf[--len], buffer, idx++, maxlen);
    2514:	5382           	subql #1,%d2
    2516:	2f06           	movel %d6,%sp@-
    2518:	2f00           	movel %d0,%sp@-
    251a:	2f05           	movel %d5,%sp@-
    251c:	1022           	moveb %a2@-,%d0
    251e:	4880           	extw %d0
    2520:	3040           	moveaw %d0,%a0
    2522:	2f08           	movel %a0,%sp@-
    2524:	4e93           	jsr %a3@
  while (len) {
    2526:	4fef 0010      	lea %sp@(16),%sp
    252a:	4a82           	tstl %d2
    252c:	66e0           	bnes 250e <_ntoa_long+0x15c>
  if (flags & FLAGS_LEFT) {
    252e:	4a83           	tstl %d3
    2530:	6728           	beqs 255a <_ntoa_long+0x1a8>
    while (idx - start_idx < width) {
    2532:	2404           	movel %d4,%d2
    2534:	94af 0068      	subl %sp@(104),%d2
    2538:	b4af 0080      	cmpl %sp@(128),%d2
    253c:	641c           	bccs 255a <_ntoa_long+0x1a8>
    253e:	262f 0080      	movel %sp@(128),%d3
      out(' ', buffer, idx++, maxlen);
    2542:	2f06           	movel %d6,%sp@-
    2544:	2f04           	movel %d4,%sp@-
    2546:	5284           	addql #1,%d4
    2548:	2f05           	movel %d5,%sp@-
    254a:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    254e:	4e93           	jsr %a3@
    while (idx - start_idx < width) {
    2550:	5282           	addql #1,%d2
    2552:	4fef 0010      	lea %sp@(16),%sp
    2556:	b483           	cmpl %d3,%d2
    2558:	65e8           	bcss 2542 <_ntoa_long+0x190>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    255a:	2004           	movel %d4,%d0
    255c:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2560:	4fef 0030      	lea %sp@(48),%sp
    2564:	4e75           	rts
  if (flags & FLAGS_HASH) {
    2566:	7210           	moveq #16,%d1
    2568:	c2af 0084      	andl %sp@(132),%d1
    256c:	2f41 0032      	movel %d1,%sp@(50)
    2570:	082f 0005 0087 	btst #5,%sp@(135)
    2576:	6700 fe8e      	beqw 2406 <_ntoa_long+0x54>
    257a:	7041           	moveq #65,%d0
    257c:	4def 005c      	lea %sp@(92),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2580:	45ef 003c      	lea %sp@(60),%a2
    2584:	4bf9 0000 31bc 	lea 31bc <__umodsi3>,%a5
    258a:	7e21           	moveq #33,%d7
    258c:	9e8e           	subl %fp,%d7
    258e:	49f9 0000 3160 	lea 3160 <__udivsi3>,%a4
    2594:	1200           	moveb %d0,%d1
    2596:	0601 fff6      	addib #-10,%d1
    259a:	2f45 0038      	movel %d5,%sp@(56)
    259e:	1a01           	moveb %d1,%d5
    25a0:	6000 fe8a      	braw 242c <_ntoa_long+0x7a>
  if (!(flags & FLAGS_LEFT)) {
    25a4:	7602           	moveq #2,%d3
    25a6:	c6af 0084      	andl %sp@(132),%d3
    25aa:	082f 0001 0087 	btst #1,%sp@(135)
    25b0:	6600 0174      	bnew 2726 <_ntoa_long+0x374>
    25b4:	2f40 0084      	movel %d0,%sp@(132)
    25b8:	42af 0032      	clrl %sp@(50)
  size_t len = 0U;
    25bc:	7400           	moveq #0,%d2
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    25be:	7601           	moveq #1,%d3
    25c0:	c6af 0084      	andl %sp@(132),%d3
    25c4:	4aaf 0080      	tstl %sp@(128)
    25c8:	6700 0124      	beqw 26ee <_ntoa_long+0x33c>
    25cc:	4a83           	tstl %d3
    25ce:	6700 013a      	beqw 270a <_ntoa_long+0x358>
    25d2:	4a2f 0037      	tstb %sp@(55)
    25d6:	6600 0180      	bnew 2758 <_ntoa_long+0x3a6>
    25da:	700c           	moveq #12,%d0
    25dc:	c0af 0084      	andl %sp@(132),%d0
    25e0:	6600 0176      	bnew 2758 <_ntoa_long+0x3a6>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25e4:	b4af 007c      	cmpl %sp@(124),%d2
    25e8:	6426           	bccs 2610 <_ntoa_long+0x25e>
    25ea:	7220           	moveq #32,%d1
    25ec:	b282           	cmpl %d2,%d1
    25ee:	6700 0196      	beqw 2786 <_ntoa_long+0x3d4>
    25f2:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    25f6:	202f 007c      	movel %sp@(124),%d0
      buf[len++] = '0';
    25fa:	5282           	addql #1,%d2
    25fc:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2600:	b480           	cmpl %d0,%d2
    2602:	6406           	bccs 260a <_ntoa_long+0x258>
    2604:	7220           	moveq #32,%d1
    2606:	b282           	cmpl %d2,%d1
    2608:	66f0           	bnes 25fa <_ntoa_long+0x248>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    260a:	4a83           	tstl %d3
    260c:	6700 fe80      	beqw 248e <_ntoa_long+0xdc>
    2610:	b4af 0080      	cmpl %sp@(128),%d2
    2614:	6400 0178      	bccw 278e <_ntoa_long+0x3dc>
    2618:	721f           	moveq #31,%d1
    261a:	b282           	cmpl %d2,%d1
    261c:	6500 01e8      	bcsw 2806 <_ntoa_long+0x454>
    2620:	43ef 003c      	lea %sp@(60),%a1
    2624:	41f1 2800      	lea %a1@(0000000000000000,%d2:l),%a0
    2628:	222f 0080      	movel %sp@(128),%d1
    262c:	d289           	addl %a1,%d1
    262e:	4def 005c      	lea %sp@(92),%fp
    2632:	7001           	moveq #1,%d0
    2634:	9089           	subl %a1,%d0
      buf[len++] = '0';
    2636:	2400           	movel %d0,%d2
    2638:	d488           	addl %a0,%d2
    263a:	10fc 0030      	moveb #48,%a0@+
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    263e:	b1c1           	cmpal %d1,%a0
    2640:	6700 014c      	beqw 278e <_ntoa_long+0x3dc>
    2644:	b1ce           	cmpal %fp,%a0
    2646:	66ee           	bnes 2636 <_ntoa_long+0x284>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2648:	7600           	moveq #0,%d3
  if (flags & FLAGS_HASH) {
    264a:	4aaf 0032      	tstl %sp@(50)
    264e:	673e           	beqs 268e <_ntoa_long+0x2dc>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2650:	4aaf 002e      	tstl %sp@(46)
    2654:	6610           	bnes 2666 <_ntoa_long+0x2b4>
    2656:	b4af 007c      	cmpl %sp@(124),%d2
    265a:	6700 0104      	beqw 2760 <_ntoa_long+0x3ae>
    265e:	b4af 0080      	cmpl %sp@(128),%d2
    2662:	6700 00fc      	beqw 2760 <_ntoa_long+0x3ae>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2666:	7010           	moveq #16,%d0
    2668:	b084           	cmpl %d4,%d0
    266a:	6700 0128      	beqw 2794 <_ntoa_long+0x3e2>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    266e:	5584           	subql #2,%d4
    2670:	6700 00d0      	beqw 2742 <_ntoa_long+0x390>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2674:	7220           	moveq #32,%d1
    2676:	b282           	cmpl %d2,%d1
    2678:	6714           	beqs 268e <_ntoa_long+0x2dc>
    267a:	2002           	movel %d2,%d0
      buf[len++] = '0';
    267c:	2400           	movel %d0,%d2
    267e:	5282           	addql #1,%d2
    2680:	1fbc 0030 083c 	moveb #48,%sp@(000000000000003c,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2686:	7020           	moveq #32,%d0
    2688:	b082           	cmpl %d2,%d0
    268a:	6600 fe2e      	bnew 24ba <_ntoa_long+0x108>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    268e:	7003           	moveq #3,%d0
    2690:	c0af 0084      	andl %sp@(132),%d0
    2694:	672a           	beqs 26c0 <_ntoa_long+0x30e>
    2696:	2e2f 0068      	movel %sp@(104),%d7
    269a:	45f7 283c      	lea %sp@(000000000000003c,%d2:l),%a2
    269e:	de82           	addl %d2,%d7
    26a0:	6000 fe6c      	braw 250e <_ntoa_long+0x15c>
    else if (flags & FLAGS_PLUS) {
    26a4:	082f 0002 0087 	btst #2,%sp@(135)
    26aa:	6600 0084      	bnew 2730 <_ntoa_long+0x37e>
    else if (flags & FLAGS_SPACE) {
    26ae:	082f 0003 0087 	btst #3,%sp@(135)
    26b4:	6600 00fc      	bnew 27b2 <_ntoa_long+0x400>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    26b8:	7003           	moveq #3,%d0
    26ba:	c0af 0084      	andl %sp@(132),%d0
    26be:	6608           	bnes 26c8 <_ntoa_long+0x316>
    for (size_t i = len; i < width; i++) {
    26c0:	b4af 0080      	cmpl %sp@(128),%d2
    26c4:	6500 fe16      	bcsw 24dc <_ntoa_long+0x12a>
    26c8:	2e2f 0068      	movel %sp@(104),%d7
  while (len) {
    26cc:	4a82           	tstl %d2
    26ce:	6600 fe38      	bnew 2508 <_ntoa_long+0x156>
    26d2:	6068           	bras 273c <_ntoa_long+0x38a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    26d4:	2a2f 0038      	movel %sp@(56),%d5
    26d8:	7420           	moveq #32,%d2
  if (!(flags & FLAGS_LEFT)) {
    26da:	7602           	moveq #2,%d3
    26dc:	c6af 0084      	andl %sp@(132),%d3
    26e0:	082f 0001 0087 	btst #1,%sp@(135)
    26e6:	6600 fda6      	bnew 248e <_ntoa_long+0xdc>
    26ea:	6000 fed2      	braw 25be <_ntoa_long+0x20c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26ee:	b4af 007c      	cmpl %sp@(124),%d2
    26f2:	6400 ff16      	bccw 260a <_ntoa_long+0x258>
    26f6:	7020           	moveq #32,%d0
    26f8:	b082           	cmpl %d2,%d0
    26fa:	6700 ff0e      	beqw 260a <_ntoa_long+0x258>
    26fe:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    2702:	202f 007c      	movel %sp@(124),%d0
    2706:	6000 fef2      	braw 25fa <_ntoa_long+0x248>
    270a:	b4af 007c      	cmpl %sp@(124),%d2
    270e:	6400 fd7e      	bccw 248e <_ntoa_long+0xdc>
    2712:	7020           	moveq #32,%d0
    2714:	b082           	cmpl %d2,%d0
    2716:	6700 fd76      	beqw 248e <_ntoa_long+0xdc>
    271a:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    271e:	202f 007c      	movel %sp@(124),%d0
    2722:	6000 fed6      	braw 25fa <_ntoa_long+0x248>
  if (!(flags & FLAGS_LEFT)) {
    2726:	2f40 0084      	movel %d0,%sp@(132)
  size_t len = 0U;
    272a:	7400           	moveq #0,%d2
    272c:	6000 fd8c      	braw 24ba <_ntoa_long+0x108>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2730:	1fbc 002b 283c 	moveb #43,%sp@(000000000000003c,%d2:l)
    2736:	5282           	addql #1,%d2
    2738:	6000 fd90      	braw 24ca <_ntoa_long+0x118>
  while (len) {
    273c:	2807           	movel %d7,%d4
    273e:	6000 fdee      	braw 252e <_ntoa_long+0x17c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2742:	7020           	moveq #32,%d0
    2744:	b082           	cmpl %d2,%d0
    2746:	6700 ff46      	beqw 268e <_ntoa_long+0x2dc>
      buf[len++] = 'b';
    274a:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    274e:	5282           	addql #1,%d2
    2750:	10bc 0062      	moveb #98,%a0@
    2754:	6000 ff1e      	braw 2674 <_ntoa_long+0x2c2>
      width--;
    2758:	53af 0080      	subql #1,%sp@(128)
    275c:	6000 fe86      	braw 25e4 <_ntoa_long+0x232>
      len--;
    2760:	2002           	movel %d2,%d0
    2762:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    2764:	7201           	moveq #1,%d1
    2766:	b282           	cmpl %d2,%d1
    2768:	6700 fd3a      	beqw 24a4 <_ntoa_long+0xf2>
    276c:	7210           	moveq #16,%d1
    276e:	b284           	cmpl %d4,%d1
    2770:	6700 00b0      	beqw 2822 <_ntoa_long+0x470>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2774:	5584           	subql #2,%d4
    2776:	6600 ff04      	bnew 267c <_ntoa_long+0x2ca>
      buf[len++] = 'b';
    277a:	41f7 083c      	lea %sp@(000000000000003c,%d0:l),%a0
    277e:	10bc 0062      	moveb #98,%a0@
    2782:	6000 fef0      	braw 2674 <_ntoa_long+0x2c2>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2786:	7020           	moveq #32,%d0
    2788:	b0af 0080      	cmpl %sp@(128),%d0
    278c:	6578           	bcss 2806 <_ntoa_long+0x454>
    278e:	7600           	moveq #0,%d3
    2790:	6000 fcfc      	braw 248e <_ntoa_long+0xdc>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2794:	082f 0005 0087 	btst #5,%sp@(135)
    279a:	6622           	bnes 27be <_ntoa_long+0x40c>
    279c:	7220           	moveq #32,%d1
    279e:	b282           	cmpl %d2,%d1
    27a0:	6700 feec      	beqw 268e <_ntoa_long+0x2dc>
      buf[len++] = 'b';
    27a4:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    27a8:	5282           	addql #1,%d2
      buf[len++] = 'x';
    27aa:	10bc 0078      	moveb #120,%a0@
    27ae:	6000 fec4      	braw 2674 <_ntoa_long+0x2c2>
      buf[len++] = ' ';
    27b2:	1fbc 0020 283c 	moveb #32,%sp@(000000000000003c,%d2:l)
    27b8:	5282           	addql #1,%d2
    27ba:	6000 fd0e      	braw 24ca <_ntoa_long+0x118>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27be:	7020           	moveq #32,%d0
    27c0:	b082           	cmpl %d2,%d0
    27c2:	6700 feca      	beqw 268e <_ntoa_long+0x2dc>
      buf[len++] = 'X';
    27c6:	1fbc 0058 283c 	moveb #88,%sp@(000000000000003c,%d2:l)
    27cc:	5282           	addql #1,%d2
    27ce:	6000 fea4      	braw 2674 <_ntoa_long+0x2c2>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27d2:	082f 0005 0087 	btst #5,%sp@(135)
    27d8:	6616           	bnes 27f0 <_ntoa_long+0x43e>
      buf[len++] = 'x';
    27da:	1f7c 0078 003c 	moveb #120,%sp@(60)
    27e0:	7001           	moveq #1,%d0
      buf[len++] = '0';
    27e2:	2400           	movel %d0,%d2
    27e4:	5282           	addql #1,%d2
    27e6:	1fbc 0030 083c 	moveb #48,%sp@(000000000000003c,%d0:l)
    27ec:	6000 fe98      	braw 2686 <_ntoa_long+0x2d4>
      buf[len++] = 'X';
    27f0:	1f7c 0058 003c 	moveb #88,%sp@(60)
    27f6:	7001           	moveq #1,%d0
      buf[len++] = '0';
    27f8:	2400           	movel %d0,%d2
    27fa:	5282           	addql #1,%d2
    27fc:	1fbc 0030 083c 	moveb #48,%sp@(000000000000003c,%d0:l)
    2802:	6000 fe82      	braw 2686 <_ntoa_long+0x2d4>
      buf[len++] = '-';
    2806:	7420           	moveq #32,%d2
    2808:	6000 fe3e      	braw 2648 <_ntoa_long+0x296>
      buf[len++] = 'b';
    280c:	1f7c 0062 003c 	moveb #98,%sp@(60)
    2812:	7001           	moveq #1,%d0
      buf[len++] = '0';
    2814:	2400           	movel %d0,%d2
    2816:	5282           	addql #1,%d2
    2818:	1fbc 0030 083c 	moveb #48,%sp@(000000000000003c,%d0:l)
    281e:	6000 fe66      	braw 2686 <_ntoa_long+0x2d4>
        len--;
    2822:	5582           	subql #2,%d2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2824:	082f 0005 0087 	btst #5,%sp@(135)
    282a:	669a           	bnes 27c6 <_ntoa_long+0x414>
      buf[len++] = 'x';
    282c:	41f7 283c      	lea %sp@(000000000000003c,%d2:l),%a0
    2830:	2400           	movel %d0,%d2
    2832:	10bc 0078      	moveb #120,%a0@
    2836:	6000 fe3c      	braw 2674 <_ntoa_long+0x2c2>

0000283a <_out_char>:
{
    283a:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    283e:	4a00           	tstb %d0
    2840:	6602           	bnes 2844 <_out_char+0xa>
}
    2842:	4e75           	rts
    _putchar(character);
    2844:	4880           	extw %d0
    2846:	3040           	moveaw %d0,%a0
    2848:	2f48 0004      	movel %a0,%sp@(4)
    284c:	4ef9 0000 3022 	jmp 3022 <_putchar>

00002852 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2852:	4fef fff4      	lea %sp@(-12),%sp
    2856:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    285a:	2a6f 003c      	moveal %sp@(60),%a5
    285e:	262f 0040      	movel %sp@(64),%d3
    2862:	242f 0044      	movel %sp@(68),%d2
    2866:	286f 0048      	moveal %sp@(72),%a4
    286a:	2c6f 004c      	moveal %sp@(76),%fp
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    286e:	4a83           	tstl %d3
    2870:	6700 034a      	beqw 2bbc <_vsnprintf+0x36a>
    // use null output function
    out = _out_null;
  }

  while (*format)
    2874:	1014           	moveb %a4@,%d0
    2876:	95ca           	subal %a2,%a2
    2878:	4a00           	tstb %d0
    287a:	6700 0350      	beqw 2bcc <_vsnprintf+0x37a>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    287e:	2e3c 0000 28f0 	movel #10480,%d7
      format++;
    2884:	528c           	addql #1,%a4
    if (*format != '%') {
    2886:	0c00 0025      	cmpib #37,%d0
    288a:	6740           	beqs 28cc <_vsnprintf+0x7a>
      out(*format, buffer, idx++, maxlen);
    288c:	280a           	movel %a2,%d4
    288e:	5284           	addql #1,%d4
    2890:	2f02           	movel %d2,%sp@-
    2892:	2f0a           	movel %a2,%sp@-
    2894:	2f03           	movel %d3,%sp@-
    2896:	4880           	extw %d0
    2898:	3040           	moveaw %d0,%a0
    289a:	2f08           	movel %a0,%sp@-
    289c:	4e95           	jsr %a5@
      continue;
    289e:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    28a2:	2444           	moveal %d4,%a2
  while (*format)
    28a4:	1014           	moveb %a4@,%d0
    28a6:	66dc           	bnes 2884 <_vsnprintf+0x32>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    28a8:	280a           	movel %a2,%d4
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    28aa:	b48a           	cmpl %a2,%d2
    28ac:	6204           	bhis 28b2 <_vsnprintf+0x60>
    28ae:	2442           	moveal %d2,%a2
    28b0:	538a           	subql #1,%a2
    28b2:	2f02           	movel %d2,%sp@-
    28b4:	2f0a           	movel %a2,%sp@-
    28b6:	2f03           	movel %d3,%sp@-
    28b8:	42a7           	clrl %sp@-
    28ba:	4e95           	jsr %a5@
  return (int)idx;
    28bc:	4fef 0010      	lea %sp@(16),%sp
}
    28c0:	2004           	movel %d4,%d0
    28c2:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    28c6:	4fef 000c      	lea %sp@(12),%sp
    28ca:	4e75           	rts
    flags = 0U;
    28cc:	7000           	moveq #0,%d0
      switch (*format) {
    28ce:	224c           	moveal %a4,%a1
    28d0:	1219           	moveb %a1@+,%d1
    28d2:	1801           	moveb %d1,%d4
    28d4:	0604 ffe0      	addib #-32,%d4
    28d8:	0c04 0010      	cmpib #16,%d4
    28dc:	6234           	bhis 2912 <_vsnprintf+0xc0>
    28de:	0284 0000 00ff 	andil #255,%d4
    28e4:	d884           	addl %d4,%d4
    28e6:	2644           	moveal %d4,%a3
    28e8:	3073 7800      	moveaw %a3@(0000000000000000,%d7:l),%a0
    28ec:	4efb 8002      	jmp %pc@(28f0 <_vsnprintf+0x9e>,%a0:w)
    28f0:	010c 0022      	movepw %a4@(34),%d0
    28f4:	0022 0102      	orib #2,%a2@-
    28f8:	0022 0022      	orib #34,%a2@-
    28fc:	0022 0022      	orib #34,%a2@-
    2900:	0022 0022      	orib #34,%a2@-
    2904:	0022 00f8      	orib #-8,%a2@-
    2908:	0022 00ee      	orib #-18,%a2@-
    290c:	0022 0022      	orib #34,%a2@-
    2910:	00e4           	.short 0x00e4
  return (ch >= '0') && (ch <= '9');
    2912:	1801           	moveb %d1,%d4
    2914:	0604 ffd0      	addib #-48,%d4
    if (_is_digit(*format)) {
    2918:	0c04 0009      	cmpib #9,%d4
    291c:	6300 023c      	blsw 2b5a <_vsnprintf+0x308>
    else if (*format == '*') {
    2920:	0c01 002a      	cmpib #42,%d1
    2924:	6700 0282      	beqw 2ba8 <_vsnprintf+0x356>
    width = 0U;
    2928:	97cb           	subal %a3,%a3
    if (*format == '.') {
    292a:	0c01 002e      	cmpib #46,%d1
    292e:	6700 01dc      	beqw 2b0c <_vsnprintf+0x2ba>
    precision = 0U;
    2932:	7c00           	moveq #0,%d6
        format++;
    2934:	2809           	movel %a1,%d4
    switch (*format) {
    2936:	0c01 006c      	cmpib #108,%d1
    293a:	6700 01fe      	beqw 2b3a <_vsnprintf+0x2e8>
    293e:	0c01 006c      	cmpib #108,%d1
    2942:	6e00 00c2      	bgtw 2a06 <_vsnprintf+0x1b4>
    2946:	0c01 0068      	cmpib #104,%d1
    294a:	6700 02d4      	beqw 2c20 <_vsnprintf+0x3ce>
    294e:	0c01 006a      	cmpib #106,%d1
    2952:	6600 06a0      	bnew 2ff4 <_vsnprintf+0x7a2>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2956:	0040 0200      	oriw #512,%d0
        if (*format == 'l') {
    295a:	122c 0001      	moveb %a4@(1),%d1
        format++;
    295e:	2844           	moveal %d4,%a4
    2960:	528c           	addql #1,%a4
    switch (*format) {
    2962:	0c01 0078      	cmpib #120,%d1
    2966:	6e00 0112      	bgtw 2a7a <_vsnprintf+0x228>
    296a:	0c01 0063      	cmpib #99,%d1
    296e:	6e00 00e0      	bgtw 2a50 <_vsnprintf+0x1fe>
    2972:	0c01 0062      	cmpib #98,%d1
    2976:	6700 053c      	beqw 2eb4 <_vsnprintf+0x662>
    297a:	0c01 0063      	cmpib #99,%d1
    297e:	6600 00a2      	bnew 2a22 <_vsnprintf+0x1d0>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2982:	2a0e           	movel %fp,%d5
    2984:	5885           	addql #4,%d5
        if (!(flags & FLAGS_LEFT)) {
    2986:	0800 0001      	btst #1,%d0
    298a:	6700 0440      	beqw 2dcc <_vsnprintf+0x57a>
      out(*format, buffer, idx++, maxlen);
    298e:	280a           	movel %a2,%d4
    2990:	5284           	addql #1,%d4
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2992:	2f02           	movel %d2,%sp@-
    2994:	2f0a           	movel %a2,%sp@-
    2996:	2f03           	movel %d3,%sp@-
    2998:	2016           	movel %fp@,%d0
    299a:	4880           	extw %d0
    299c:	3040           	moveaw %d0,%a0
    299e:	2f08           	movel %a0,%sp@-
    29a0:	4e95           	jsr %a5@
          while (l++ < width) {
    29a2:	4fef 0010      	lea %sp@(16),%sp
    29a6:	d5cb           	addal %a3,%a2
    29a8:	7001           	moveq #1,%d0
    29aa:	b08b           	cmpl %a3,%d0
    29ac:	6400 05ee      	bccw 2f9c <_vsnprintf+0x74a>
            out(' ', buffer, idx++, maxlen);
    29b0:	2004           	movel %d4,%d0
    29b2:	5284           	addql #1,%d4
    29b4:	2f02           	movel %d2,%sp@-
    29b6:	2f00           	movel %d0,%sp@-
    29b8:	2f03           	movel %d3,%sp@-
    29ba:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    29be:	4e95           	jsr %a5@
          while (l++ < width) {
    29c0:	4fef 0010      	lea %sp@(16),%sp
    29c4:	b5c4           	cmpal %d4,%a2
    29c6:	66e8           	bnes 29b0 <_vsnprintf+0x15e>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    29c8:	2c45           	moveal %d5,%fp
  while (*format)
    29ca:	1014           	moveb %a4@,%d0
    29cc:	6600 feb6      	bnew 2884 <_vsnprintf+0x32>
    29d0:	6000 fed6      	braw 28a8 <_vsnprintf+0x56>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    29d4:	7201           	moveq #1,%d1
    29d6:	8081           	orl %d1,%d0
      format++;
    29d8:	2849           	moveal %a1,%a4
    29da:	6000 fef2      	braw 28ce <_vsnprintf+0x7c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    29de:	7802           	moveq #2,%d4
    29e0:	8084           	orl %d4,%d0
      format++;
    29e2:	2849           	moveal %a1,%a4
    29e4:	6000 fee8      	braw 28ce <_vsnprintf+0x7c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    29e8:	7a04           	moveq #4,%d5
    29ea:	8085           	orl %d5,%d0
      format++;
    29ec:	2849           	moveal %a1,%a4
    29ee:	6000 fede      	braw 28ce <_vsnprintf+0x7c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    29f2:	7810           	moveq #16,%d4
    29f4:	8084           	orl %d4,%d0
      format++;
    29f6:	2849           	moveal %a1,%a4
    29f8:	6000 fed4      	braw 28ce <_vsnprintf+0x7c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    29fc:	7208           	moveq #8,%d1
    29fe:	8081           	orl %d1,%d0
      format++;
    2a00:	2849           	moveal %a1,%a4
    2a02:	6000 feca      	braw 28ce <_vsnprintf+0x7c>
    switch (*format) {
    2a06:	0c01 007a      	cmpib #122,%d1
    2a0a:	663c           	bnes 2a48 <_vsnprintf+0x1f6>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2a0c:	0040 0100      	oriw #256,%d0
        if (*format == 'l') {
    2a10:	122c 0001      	moveb %a4@(1),%d1
        format++;
    2a14:	2844           	moveal %d4,%a4
    2a16:	528c           	addql #1,%a4
    switch (*format) {
    2a18:	0c01 0078      	cmpib #120,%d1
    2a1c:	6f00 ff4c      	blew 296a <_vsnprintf+0x118>
    2a20:	6058           	bras 2a7a <_vsnprintf+0x228>
    2a22:	0c01 0025      	cmpib #37,%d1
    2a26:	6674           	bnes 2a9c <_vsnprintf+0x24a>
        out('%', buffer, idx++, maxlen);
    2a28:	280a           	movel %a2,%d4
    2a2a:	5284           	addql #1,%d4
    2a2c:	2f02           	movel %d2,%sp@-
    2a2e:	2f0a           	movel %a2,%sp@-
    2a30:	2f03           	movel %d3,%sp@-
    2a32:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    2a36:	4e95           	jsr %a5@
        break;
    2a38:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    2a3c:	2444           	moveal %d4,%a2
  while (*format)
    2a3e:	1014           	moveb %a4@,%d0
    2a40:	6600 fe42      	bnew 2884 <_vsnprintf+0x32>
    2a44:	6000 fe62      	braw 28a8 <_vsnprintf+0x56>
        format++;
    2a48:	2849           	moveal %a1,%a4
    switch (*format) {
    2a4a:	0c01 0078      	cmpib #120,%d1
    2a4e:	6e2a           	bgts 2a7a <_vsnprintf+0x228>
    2a50:	1a01           	moveb %d1,%d5
    2a52:	0605 ff9c      	addib #-100,%d5
    2a56:	0285 0000 00ff 	andil #255,%d5
    2a5c:	7801           	moveq #1,%d4
    2a5e:	ebac           	lsll %d5,%d4
    2a60:	0284 0012 0821 	andil #1181729,%d4
    2a66:	6600 02b6      	bnew 2d1e <_vsnprintf+0x4cc>
    2a6a:	0c01 0073      	cmpib #115,%d1
    2a6e:	6700 01d2      	beqw 2c42 <_vsnprintf+0x3f0>
    2a72:	0c01 0070      	cmpib #112,%d1
    2a76:	6700 0176      	beqw 2bee <_vsnprintf+0x39c>
        out(*format, buffer, idx++, maxlen);
    2a7a:	280a           	movel %a2,%d4
    2a7c:	5284           	addql #1,%d4
    2a7e:	2f02           	movel %d2,%sp@-
    2a80:	2f0a           	movel %a2,%sp@-
    2a82:	2f03           	movel %d3,%sp@-
    switch (*format) {
    2a84:	4881           	extw %d1
        out(*format, buffer, idx++, maxlen);
    2a86:	3041           	moveaw %d1,%a0
    2a88:	2f08           	movel %a0,%sp@-
    2a8a:	4e95           	jsr %a5@
        break;
    2a8c:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    2a90:	2444           	moveal %d4,%a2
  while (*format)
    2a92:	1014           	moveb %a4@,%d0
    2a94:	6600 fdee      	bnew 2884 <_vsnprintf+0x32>
    2a98:	6000 fe0e      	braw 28a8 <_vsnprintf+0x56>
    switch (*format) {
    2a9c:	0c01 0058      	cmpib #88,%d1
    2aa0:	66d8           	bnes 2a7a <_vsnprintf+0x228>
          flags |= FLAGS_UPPERCASE;
    2aa2:	7a20           	moveq #32,%d5
    2aa4:	8085           	orl %d5,%d0
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2aa6:	78f3           	moveq #-13,%d4
    2aa8:	c880           	andl %d0,%d4
        if (flags & FLAGS_PRECISION) {
    2aaa:	0800 000a      	btst #10,%d0
    2aae:	6600 036e      	bnew 2e1e <_vsnprintf+0x5cc>
    2ab2:	327c 0010      	moveaw #16,%a1
        if ((*format == 'i') || (*format == 'd')) {
    2ab6:	0c01 0064      	cmpib #100,%d1
    2aba:	6700 0374      	beqw 2e30 <_vsnprintf+0x5de>
          if (flags & FLAGS_LONG_LONG) {
    2abe:	0804 0009      	btst #9,%d4
    2ac2:	6600 fde0      	bnew 28a4 <_vsnprintf+0x52>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2ac6:	2a0e           	movel %fp,%d5
    2ac8:	5885           	addql #4,%d5
          else if (flags & FLAGS_LONG) {
    2aca:	0804 0008      	btst #8,%d4
    2ace:	6600 04d4      	bnew 2fa4 <_vsnprintf+0x752>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2ad2:	0804 0006      	btst #6,%d4
    2ad6:	6600 04ae      	bnew 2f86 <_vsnprintf+0x734>
    2ada:	2016           	movel %fp@,%d0
    2adc:	4a04           	tstb %d4
    2ade:	6a06           	bpls 2ae6 <_vsnprintf+0x294>
    2ae0:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2ae6:	2f04           	movel %d4,%sp@-
    2ae8:	2f0b           	movel %a3,%sp@-
    2aea:	2f06           	movel %d6,%sp@-
    2aec:	2f09           	movel %a1,%sp@-
    2aee:	42a7           	clrl %sp@-
    2af0:	2f00           	movel %d0,%sp@-
    2af2:	2f02           	movel %d2,%sp@-
    2af4:	2f0a           	movel %a2,%sp@-
    2af6:	2f03           	movel %d3,%sp@-
    2af8:	2f0d           	movel %a5,%sp@-
    2afa:	4eb9 0000 23b2 	jsr 23b2 <_ntoa_long>
    2b00:	2440           	moveal %d0,%a2
    2b02:	4fef 0028      	lea %sp@(40),%sp
    2b06:	2c45           	moveal %d5,%fp
        break;
    2b08:	6000 fec0      	braw 29ca <_vsnprintf+0x178>
      flags |= FLAGS_PRECISION;
    2b0c:	0040 0400      	oriw #1024,%d0
      if (_is_digit(*format)) {
    2b10:	122c 0001      	moveb %a4@(1),%d1
  return (ch >= '0') && (ch <= '9');
    2b14:	1a01           	moveb %d1,%d5
    2b16:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2b1a:	0c05 0009      	cmpib #9,%d5
    2b1e:	6300 01ca      	blsw 2cea <_vsnprintf+0x498>
      else if (*format == '*') {
    2b22:	0c01 002a      	cmpib #42,%d1
    2b26:	6700 0292      	beqw 2dba <_vsnprintf+0x568>
      format++;
    2b2a:	2849           	moveal %a1,%a4
    precision = 0U;
    2b2c:	7c00           	moveq #0,%d6
    2b2e:	5289           	addql #1,%a1
        format++;
    2b30:	2809           	movel %a1,%d4
    switch (*format) {
    2b32:	0c01 006c      	cmpib #108,%d1
    2b36:	6600 fe06      	bnew 293e <_vsnprintf+0xec>
        if (*format == 'l') {
    2b3a:	122c 0001      	moveb %a4@(1),%d1
    2b3e:	0c01 006c      	cmpib #108,%d1
    2b42:	6700 0354      	beqw 2e98 <_vsnprintf+0x646>
        flags |= FLAGS_LONG;
    2b46:	0040 0100      	oriw #256,%d0
        format++;
    2b4a:	2844           	moveal %d4,%a4
    2b4c:	528c           	addql #1,%a4
    switch (*format) {
    2b4e:	0c01 0078      	cmpib #120,%d1
    2b52:	6f00 fe16      	blew 296a <_vsnprintf+0x118>
    2b56:	6000 ff22      	braw 2a7a <_vsnprintf+0x228>
  unsigned int i = 0U;
    2b5a:	97cb           	subal %a3,%a3
    2b5c:	204b           	moveal %a3,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2b5e:	2849           	moveal %a1,%a4
    2b60:	47f0 8800      	lea %a0@(0000000000000000,%a0:l),%a3
    2b64:	d7cb           	addal %a3,%a3
    2b66:	d7c8           	addal %a0,%a3
    2b68:	d7cb           	addal %a3,%a3
    2b6a:	4881           	extw %d1
    2b6c:	41f3 10d0      	lea %a3@(ffffffffffffffd0,%d1:w),%a0
  while (_is_digit(**str)) {
    2b70:	1211           	moveb %a1@,%d1
  return (ch >= '0') && (ch <= '9');
    2b72:	1801           	moveb %d1,%d4
    2b74:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    2b78:	0c04 0009      	cmpib #9,%d4
    2b7c:	6222           	bhis 2ba0 <_vsnprintf+0x34e>
    2b7e:	5289           	addql #1,%a1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2b80:	2849           	moveal %a1,%a4
    2b82:	47f0 8800      	lea %a0@(0000000000000000,%a0:l),%a3
    2b86:	d7cb           	addal %a3,%a3
    2b88:	d7c8           	addal %a0,%a3
    2b8a:	d7cb           	addal %a3,%a3
    2b8c:	4881           	extw %d1
    2b8e:	41f3 10d0      	lea %a3@(ffffffffffffffd0,%d1:w),%a0
  while (_is_digit(**str)) {
    2b92:	1211           	moveb %a1@,%d1
  return (ch >= '0') && (ch <= '9');
    2b94:	1801           	moveb %d1,%d4
    2b96:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    2b9a:	0c04 0009      	cmpib #9,%d4
    2b9e:	63de           	blss 2b7e <_vsnprintf+0x32c>
    2ba0:	2648           	moveal %a0,%a3
    2ba2:	5289           	addql #1,%a1
    2ba4:	6000 fd84      	braw 292a <_vsnprintf+0xd8>
      const int w = va_arg(va, int);
    2ba8:	265e           	moveal %fp@+,%a3
      if (w < 0) {
    2baa:	b6fc 0000      	cmpaw #0,%a3
    2bae:	6d28           	blts 2bd8 <_vsnprintf+0x386>
    if (*format == '.') {
    2bb0:	122c 0001      	moveb %a4@(1),%d1
      format++;
    2bb4:	2849           	moveal %a1,%a4
    2bb6:	5289           	addql #1,%a1
    2bb8:	6000 fd70      	braw 292a <_vsnprintf+0xd8>
    out = _out_null;
    2bbc:	4bf9 0000 23b0 	lea 23b0 <_out_null>,%a5
  while (*format)
    2bc2:	1014           	moveb %a4@,%d0
    2bc4:	95ca           	subal %a2,%a2
    2bc6:	4a00           	tstb %d0
    2bc8:	6600 fcb4      	bnew 287e <_vsnprintf+0x2c>
    2bcc:	7800           	moveq #0,%d4
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2bce:	b48a           	cmpl %a2,%d2
    2bd0:	6200 fce0      	bhiw 28b2 <_vsnprintf+0x60>
    2bd4:	6000 fcd8      	braw 28ae <_vsnprintf+0x5c>
        flags |= FLAGS_LEFT;    // reverse padding
    2bd8:	7a02           	moveq #2,%d5
    2bda:	8085           	orl %d5,%d0
        width = (unsigned int)-w;
    2bdc:	220b           	movel %a3,%d1
    2bde:	4481           	negl %d1
    2be0:	2641           	moveal %d1,%a3
    if (*format == '.') {
    2be2:	122c 0001      	moveb %a4@(1),%d1
      format++;
    2be6:	2849           	moveal %a1,%a4
    2be8:	5289           	addql #1,%a1
    2bea:	6000 fd3e      	braw 292a <_vsnprintf+0xd8>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2bee:	7221           	moveq #33,%d1
    2bf0:	8280           	orl %d0,%d1
    2bf2:	2f01           	movel %d1,%sp@-
    2bf4:	4878 0008      	pea 8 <DUART_ACR>
    2bf8:	2f06           	movel %d6,%sp@-
    2bfa:	4878 0010      	pea 10 <DUART_MR1B>
    2bfe:	42a7           	clrl %sp@-
    2c00:	2f1e           	movel %fp@+,%sp@-
    2c02:	2f02           	movel %d2,%sp@-
    2c04:	2f0a           	movel %a2,%sp@-
    2c06:	2f03           	movel %d3,%sp@-
    2c08:	2f0d           	movel %a5,%sp@-
    2c0a:	4eb9 0000 23b2 	jsr 23b2 <_ntoa_long>
    2c10:	2440           	moveal %d0,%a2
        break;
    2c12:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    2c16:	1014           	moveb %a4@,%d0
    2c18:	6600 fc6a      	bnew 2884 <_vsnprintf+0x32>
    2c1c:	6000 fc8a      	braw 28a8 <_vsnprintf+0x56>
        if (*format == 'h') {
    2c20:	122c 0001      	moveb %a4@(1),%d1
    2c24:	0c01 0068      	cmpib #104,%d1
    2c28:	6700 0250      	beqw 2e7a <_vsnprintf+0x628>
        flags |= FLAGS_SHORT;
    2c2c:	7a7f           	moveq #127,%d5
    2c2e:	4605           	notb %d5
    2c30:	8085           	orl %d5,%d0
        format++;
    2c32:	2844           	moveal %d4,%a4
    2c34:	528c           	addql #1,%a4
    switch (*format) {
    2c36:	0c01 0078      	cmpib #120,%d1
    2c3a:	6f00 fd2e      	blew 296a <_vsnprintf+0x118>
    2c3e:	6000 fe3a      	braw 2a7a <_vsnprintf+0x228>
        const char* p = va_arg(va, char*);
    2c42:	2f4e 0030      	movel %fp,%sp@(48)
    2c46:	204e           	moveal %fp,%a0
    2c48:	58af 0030      	addql #4,%sp@(48)
    2c4c:	2c58           	moveal %a0@+,%fp
  for (s = str; *s && maxsize--; ++s);
    2c4e:	1f56 002f      	moveb %fp@,%sp@(47)
    2c52:	122f 002f      	moveb %sp@(47),%d1
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2c56:	4a86           	tstl %d6
    2c58:	6700 014e      	beqw 2da8 <_vsnprintf+0x556>
  for (s = str; *s && maxsize--; ++s);
    2c5c:	4a2f 002f      	tstb %sp@(47)
    2c60:	671a           	beqs 2c7c <_vsnprintf+0x42a>
    2c62:	2a06           	movel %d6,%d5
    2c64:	5385           	subql #1,%d5
    2c66:	43f6 5801      	lea %fp@(0000000000000001,%d5:l),%a1
    2c6a:	204e           	moveal %fp,%a0
    2c6c:	5288           	addql #1,%a0
    2c6e:	4a10           	tstb %a0@
    2c70:	6700 0200      	beqw 2e72 <_vsnprintf+0x620>
    2c74:	b1c9           	cmpal %a1,%a0
    2c76:	66f4           	bnes 2c6c <_vsnprintf+0x41a>
  return (unsigned int)(s - str);
    2c78:	2809           	movel %a1,%d4
    2c7a:	988e           	subl %fp,%d4
        if (flags & FLAGS_PRECISION) {
    2c7c:	2a00           	movel %d0,%d5
    2c7e:	0285 0000 0400 	andil #1024,%d5
    2c84:	2045           	moveal %d5,%a0
    2c86:	0800 000a      	btst #10,%d0
    2c8a:	6706           	beqs 2c92 <_vsnprintf+0x440>
          l = (l < precision ? l : precision);
    2c8c:	bc84           	cmpl %d4,%d6
    2c8e:	6402           	bccs 2c92 <_vsnprintf+0x440>
    2c90:	2806           	movel %d6,%d4
        if (!(flags & FLAGS_LEFT)) {
    2c92:	7a02           	moveq #2,%d5
    2c94:	ca80           	andl %d0,%d5
    2c96:	2f45 0034      	movel %d5,%sp@(52)
    2c9a:	0800 0001      	btst #1,%d0
    2c9e:	6700 0234      	beqw 2ed4 <_vsnprintf+0x682>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2ca2:	4a2f 002f      	tstb %sp@(47)
    2ca6:	6700 0198      	beqw 2e40 <_vsnprintf+0x5ee>
          out(*(p++), buffer, idx++, maxlen);
    2caa:	200a           	movel %a2,%d0
    2cac:	2a08           	movel %a0,%d5
    2cae:	2046           	moveal %d6,%a0
    2cb0:	2c0b           	movel %a3,%d6
    2cb2:	264a           	moveal %a2,%a3
    2cb4:	244e           	moveal %fp,%a2
    2cb6:	2c48           	moveal %a0,%fp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2cb8:	4a85           	tstl %d5
    2cba:	670e           	beqs 2cca <_vsnprintf+0x478>
    2cbc:	41ee ffff      	lea %fp@(-1),%a0
    2cc0:	bcfc 0000      	cmpaw #0,%fp
    2cc4:	6700 0170      	beqw 2e36 <_vsnprintf+0x5e4>
    2cc8:	2c48           	moveal %a0,%fp
          out(*(p++), buffer, idx++, maxlen);
    2cca:	528b           	addql #1,%a3
    2ccc:	528a           	addql #1,%a2
    2cce:	2f02           	movel %d2,%sp@-
    2cd0:	2f00           	movel %d0,%sp@-
    2cd2:	2f03           	movel %d3,%sp@-
    2cd4:	4881           	extw %d1
    2cd6:	3041           	moveaw %d1,%a0
    2cd8:	2f08           	movel %a0,%sp@-
    2cda:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2cdc:	1212           	moveb %a2@,%d1
    2cde:	4fef 0010      	lea %sp@(16),%sp
    2ce2:	6700 0152      	beqw 2e36 <_vsnprintf+0x5e4>
          out(*(p++), buffer, idx++, maxlen);
    2ce6:	200b           	movel %a3,%d0
    2ce8:	60ce           	bras 2cb8 <_vsnprintf+0x466>
  unsigned int i = 0U;
    2cea:	7c00           	moveq #0,%d6
    2cec:	2046           	moveal %d6,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2cee:	5289           	addql #1,%a1
    2cf0:	2c08           	movel %a0,%d6
    2cf2:	dc88           	addl %a0,%d6
    2cf4:	dc86           	addl %d6,%d6
    2cf6:	dc88           	addl %a0,%d6
    2cf8:	dc86           	addl %d6,%d6
    2cfa:	4881           	extw %d1
    2cfc:	3801           	movew %d1,%d4
    2cfe:	48c4           	extl %d4
    2d00:	2846           	moveal %d6,%a4
    2d02:	41f4 48d0      	lea %a4@(ffffffffffffffd0,%d4:l),%a0
  while (_is_digit(**str)) {
    2d06:	1211           	moveb %a1@,%d1
  return (ch >= '0') && (ch <= '9');
    2d08:	1801           	moveb %d1,%d4
    2d0a:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    2d0e:	0c04 0009      	cmpib #9,%d4
    2d12:	63da           	blss 2cee <_vsnprintf+0x49c>
    2d14:	2c08           	movel %a0,%d6
    2d16:	2849           	moveal %a1,%a4
    2d18:	5289           	addql #1,%a1
    2d1a:	6000 fc18      	braw 2934 <_vsnprintf+0xe2>
        if (*format == 'x' || *format == 'X') {
    2d1e:	0c01 0078      	cmpib #120,%d1
    2d22:	6700 fd82      	beqw 2aa6 <_vsnprintf+0x254>
    2d26:	0c01 006f      	cmpib #111,%d1
    2d2a:	6700 0208      	beqw 2f34 <_vsnprintf+0x6e2>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2d2e:	78ef           	moveq #-17,%d4
    2d30:	c084           	andl %d4,%d0
          base = 10U;
    2d32:	327c 000a      	moveaw #10,%a1
        if (flags & FLAGS_PRECISION) {
    2d36:	2a00           	movel %d0,%d5
    2d38:	0285 0000 0400 	andil #1024,%d5
        if ((*format != 'i') && (*format != 'd')) {
    2d3e:	0c01 0069      	cmpib #105,%d1
    2d42:	6600 01e0      	bnew 2f24 <_vsnprintf+0x6d2>
        if (flags & FLAGS_PRECISION) {
    2d46:	4a85           	tstl %d5
    2d48:	6600 00da      	bnew 2e24 <_vsnprintf+0x5d2>
          if (flags & FLAGS_LONG_LONG) {
    2d4c:	0800 0009      	btst #9,%d0
    2d50:	6600 fb52      	bnew 28a4 <_vsnprintf+0x52>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2d54:	280e           	movel %fp,%d4
    2d56:	5884           	addql #4,%d4
            const long value = va_arg(va, long);
    2d58:	2216           	movel %fp@,%d1
          else if (flags & FLAGS_LONG) {
    2d5a:	0800 0008      	btst #8,%d0
    2d5e:	660e           	bnes 2d6e <_vsnprintf+0x51c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2d60:	0800 0006      	btst #6,%d0
    2d64:	6600 0202      	bnew 2f68 <_vsnprintf+0x716>
    2d68:	4a00           	tstb %d0
    2d6a:	6a02           	bpls 2d6e <_vsnprintf+0x51c>
    2d6c:	48c1           	extl %d1
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2d6e:	2f00           	movel %d0,%sp@-
    2d70:	2f0b           	movel %a3,%sp@-
    2d72:	2f06           	movel %d6,%sp@-
    2d74:	2f09           	movel %a1,%sp@-
    2d76:	2001           	movel %d1,%d0
    2d78:	d080           	addl %d0,%d0
    2d7a:	9180           	subxl %d0,%d0
    2d7c:	4480           	negl %d0
    2d7e:	2f00           	movel %d0,%sp@-
    2d80:	4a81           	tstl %d1
    2d82:	6d00 01c6      	bltw 2f4a <_vsnprintf+0x6f8>
    2d86:	2f01           	movel %d1,%sp@-
    2d88:	2f02           	movel %d2,%sp@-
    2d8a:	2f0a           	movel %a2,%sp@-
    2d8c:	2f03           	movel %d3,%sp@-
    2d8e:	2f0d           	movel %a5,%sp@-
    2d90:	4eb9 0000 23b2 	jsr 23b2 <_ntoa_long>
    2d96:	2440           	moveal %d0,%a2
    2d98:	4fef 0028      	lea %sp@(40),%sp
    2d9c:	2c44           	moveal %d4,%fp
  while (*format)
    2d9e:	1014           	moveb %a4@,%d0
    2da0:	6600 fae2      	bnew 2884 <_vsnprintf+0x32>
    2da4:	6000 fb02      	braw 28a8 <_vsnprintf+0x56>
  for (s = str; *s && maxsize--; ++s);
    2da8:	7afe           	moveq #-2,%d5
    2daa:	4a01           	tstb %d1
    2dac:	6700 fece      	beqw 2c7c <_vsnprintf+0x42a>
    2db0:	43f6 5801      	lea %fp@(0000000000000001,%d5:l),%a1
    2db4:	204e           	moveal %fp,%a0
    2db6:	6000 feb4      	braw 2c6c <_vsnprintf+0x41a>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2dba:	2c1e           	movel %fp@+,%d6
    2dbc:	6b50           	bmis 2e0e <_vsnprintf+0x5bc>
    switch (*format) {
    2dbe:	122c 0002      	moveb %a4@(2),%d1
        format++;
    2dc2:	548c           	addql #2,%a4
    2dc4:	43ec 0001      	lea %a4@(1),%a1
    2dc8:	6000 fb6a      	braw 2934 <_vsnprintf+0xe2>
          while (l++ < width) {
    2dcc:	7001           	moveq #1,%d0
    2dce:	b08b           	cmpl %a3,%d0
    2dd0:	6400 01f6      	bccw 2fc8 <_vsnprintf+0x776>
    2dd4:	47f2 b8ff      	lea %a2@(ffffffffffffffff,%a3:l),%a3
            out(' ', buffer, idx++, maxlen);
    2dd8:	200a           	movel %a2,%d0
    2dda:	528a           	addql #1,%a2
    2ddc:	2f02           	movel %d2,%sp@-
    2dde:	2f00           	movel %d0,%sp@-
    2de0:	2f03           	movel %d3,%sp@-
    2de2:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2de6:	4e95           	jsr %a5@
          while (l++ < width) {
    2de8:	4fef 0010      	lea %sp@(16),%sp
    2dec:	b7ca           	cmpal %a2,%a3
    2dee:	66e8           	bnes 2dd8 <_vsnprintf+0x586>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2df0:	45eb 0001      	lea %a3@(1),%a2
    2df4:	2f02           	movel %d2,%sp@-
    2df6:	2f0b           	movel %a3,%sp@-
    2df8:	2f03           	movel %d3,%sp@-
    2dfa:	2016           	movel %fp@,%d0
    2dfc:	4880           	extw %d0
    2dfe:	3040           	moveaw %d0,%a0
    2e00:	2f08           	movel %a0,%sp@-
    2e02:	4e95           	jsr %a5@
    2e04:	4fef 0010      	lea %sp@(16),%sp
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2e08:	2c45           	moveal %d5,%fp
        break;
    2e0a:	6000 fbbe      	braw 29ca <_vsnprintf+0x178>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2e0e:	7c00           	moveq #0,%d6
    switch (*format) {
    2e10:	122c 0002      	moveb %a4@(2),%d1
        format++;
    2e14:	548c           	addql #2,%a4
    2e16:	43ec 0001      	lea %a4@(1),%a1
    2e1a:	6000 fb18      	braw 2934 <_vsnprintf+0xe2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2e1e:	2004           	movel %d4,%d0
        if (flags & FLAGS_PRECISION) {
    2e20:	327c 0010      	moveaw #16,%a1
          flags &= ~FLAGS_ZEROPAD;
    2e24:	78fe           	moveq #-2,%d4
    2e26:	c880           	andl %d0,%d4
        if ((*format == 'i') || (*format == 'd')) {
    2e28:	0c01 0069      	cmpib #105,%d1
    2e2c:	6600 fc88      	bnew 2ab6 <_vsnprintf+0x264>
    2e30:	2004           	movel %d4,%d0
    2e32:	6000 ff18      	braw 2d4c <_vsnprintf+0x4fa>
    2e36:	244b           	moveal %a3,%a2
    2e38:	2646           	moveal %d6,%a3
        if (flags & FLAGS_LEFT) {
    2e3a:	4aaf 0034      	tstl %sp@(52)
    2e3e:	6724           	beqs 2e64 <_vsnprintf+0x612>
    2e40:	2a0a           	movel %a2,%d5
          while (l++ < width) {
    2e42:	b88b           	cmpl %a3,%d4
    2e44:	641e           	bccs 2e64 <_vsnprintf+0x612>
    2e46:	45f3 a800      	lea %a3@(0000000000000000,%a2:l),%a2
    2e4a:	95c4           	subal %d4,%a2
            out(' ', buffer, idx++, maxlen);
    2e4c:	2005           	movel %d5,%d0
    2e4e:	5285           	addql #1,%d5
    2e50:	2f02           	movel %d2,%sp@-
    2e52:	2f00           	movel %d0,%sp@-
    2e54:	2f03           	movel %d3,%sp@-
    2e56:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2e5a:	4e95           	jsr %a5@
          while (l++ < width) {
    2e5c:	4fef 0010      	lea %sp@(16),%sp
    2e60:	b5c5           	cmpal %d5,%a2
    2e62:	66e8           	bnes 2e4c <_vsnprintf+0x5fa>
        const char* p = va_arg(va, char*);
    2e64:	2c6f 0030      	moveal %sp@(48),%fp
  while (*format)
    2e68:	1014           	moveb %a4@,%d0
    2e6a:	6600 fa18      	bnew 2884 <_vsnprintf+0x32>
    2e6e:	6000 fa38      	braw 28a8 <_vsnprintf+0x56>
  return (unsigned int)(s - str);
    2e72:	2808           	movel %a0,%d4
    2e74:	988e           	subl %fp,%d4
    2e76:	6000 fe04      	braw 2c7c <_vsnprintf+0x42a>
          flags |= FLAGS_CHAR;
    2e7a:	723f           	moveq #63,%d1
    2e7c:	4601           	notb %d1
    2e7e:	8081           	orl %d1,%d0
          format++;
    2e80:	280c           	movel %a4,%d4
    2e82:	5484           	addql #2,%d4
    switch (*format) {
    2e84:	122c 0002      	moveb %a4@(2),%d1
        format++;
    2e88:	2844           	moveal %d4,%a4
    2e8a:	528c           	addql #1,%a4
    switch (*format) {
    2e8c:	0c01 0078      	cmpib #120,%d1
    2e90:	6f00 fad8      	blew 296a <_vsnprintf+0x118>
    2e94:	6000 fbe4      	braw 2a7a <_vsnprintf+0x228>
          flags |= FLAGS_LONG_LONG;
    2e98:	0040 0300      	oriw #768,%d0
          format++;
    2e9c:	280c           	movel %a4,%d4
    2e9e:	5484           	addql #2,%d4
    switch (*format) {
    2ea0:	122c 0002      	moveb %a4@(2),%d1
        format++;
    2ea4:	2844           	moveal %d4,%a4
    2ea6:	528c           	addql #1,%a4
    switch (*format) {
    2ea8:	0c01 0078      	cmpib #120,%d1
    2eac:	6f00 fabc      	blew 296a <_vsnprintf+0x118>
    2eb0:	6000 fbc8      	braw 2a7a <_vsnprintf+0x228>
    2eb4:	327c 0002      	moveaw #2,%a1
    2eb8:	2a00           	movel %d0,%d5
    2eba:	0285 0000 0400 	andil #1024,%d5
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2ec0:	78f3           	moveq #-13,%d4
    2ec2:	c880           	andl %d0,%d4
        if (flags & FLAGS_PRECISION) {
    2ec4:	4a85           	tstl %d5
    2ec6:	6700 ff60      	beqw 2e28 <_vsnprintf+0x5d6>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2eca:	2004           	movel %d4,%d0
          flags &= ~FLAGS_ZEROPAD;
    2ecc:	78fe           	moveq #-2,%d4
    2ece:	c880           	andl %d0,%d4
    2ed0:	6000 ff56      	braw 2e28 <_vsnprintf+0x5d6>
          while (l++ < width) {
    2ed4:	2004           	movel %d4,%d0
    2ed6:	5280           	addql #1,%d0
    2ed8:	b88b           	cmpl %a3,%d4
    2eda:	6400 010a      	bccw 2fe6 <_vsnprintf+0x794>
    2ede:	200b           	movel %a3,%d0
    2ee0:	d08a           	addl %a2,%d0
    2ee2:	9084           	subl %d4,%d0
    2ee4:	2a08           	movel %a0,%d5
    2ee6:	2800           	movel %d0,%d4
            out(' ', buffer, idx++, maxlen);
    2ee8:	200a           	movel %a2,%d0
    2eea:	528a           	addql #1,%a2
    2eec:	2f02           	movel %d2,%sp@-
    2eee:	2f00           	movel %d0,%sp@-
    2ef0:	2f03           	movel %d3,%sp@-
    2ef2:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2ef6:	4e95           	jsr %a5@
          while (l++ < width) {
    2ef8:	4fef 0010      	lea %sp@(16),%sp
    2efc:	b88a           	cmpl %a2,%d4
    2efe:	66e8           	bnes 2ee8 <_vsnprintf+0x696>
    2f00:	2045           	moveal %d5,%a0
    2f02:	280b           	movel %a3,%d4
    2f04:	5284           	addql #1,%d4
    2f06:	1f56 002f      	moveb %fp@,%sp@(47)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2f0a:	122f 002f      	moveb %sp@(47),%d1
    2f0e:	6700 ff54      	beqw 2e64 <_vsnprintf+0x612>
          out(*(p++), buffer, idx++, maxlen);
    2f12:	200a           	movel %a2,%d0
    2f14:	2a08           	movel %a0,%d5
    2f16:	2046           	moveal %d6,%a0
    2f18:	2c0b           	movel %a3,%d6
    2f1a:	264a           	moveal %a2,%a3
    2f1c:	244e           	moveal %fp,%a2
    2f1e:	2c48           	moveal %a0,%fp
    2f20:	6000 fd96      	braw 2cb8 <_vsnprintf+0x466>
        if ((*format != 'i') && (*format != 'd')) {
    2f24:	0c01 0064      	cmpib #100,%d1
    2f28:	6696           	bnes 2ec0 <_vsnprintf+0x66e>
        if (flags & FLAGS_PRECISION) {
    2f2a:	4a85           	tstl %d5
    2f2c:	6700 fe1e      	beqw 2d4c <_vsnprintf+0x4fa>
    2f30:	6000 fef2      	braw 2e24 <_vsnprintf+0x5d2>
        if (*format == 'x' || *format == 'X') {
    2f34:	327c 0008      	moveaw #8,%a1
        if (flags & FLAGS_PRECISION) {
    2f38:	2a00           	movel %d0,%d5
    2f3a:	0285 0000 0400 	andil #1024,%d5
        if ((*format != 'i') && (*format != 'd')) {
    2f40:	0c01 0069      	cmpib #105,%d1
    2f44:	6700 fe00      	beqw 2d46 <_vsnprintf+0x4f4>
    2f48:	60da           	bras 2f24 <_vsnprintf+0x6d2>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2f4a:	4481           	negl %d1
    2f4c:	2f01           	movel %d1,%sp@-
    2f4e:	2f02           	movel %d2,%sp@-
    2f50:	2f0a           	movel %a2,%sp@-
    2f52:	2f03           	movel %d3,%sp@-
    2f54:	2f0d           	movel %a5,%sp@-
    2f56:	4eb9 0000 23b2 	jsr 23b2 <_ntoa_long>
    2f5c:	2440           	moveal %d0,%a2
    2f5e:	4fef 0028      	lea %sp@(40),%sp
    2f62:	2c44           	moveal %d4,%fp
    2f64:	6000 fe38      	braw 2d9e <_vsnprintf+0x54c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2f68:	4881           	extw %d1
    2f6a:	48c1           	extl %d1
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2f6c:	2f00           	movel %d0,%sp@-
    2f6e:	2f0b           	movel %a3,%sp@-
    2f70:	2f06           	movel %d6,%sp@-
    2f72:	2f09           	movel %a1,%sp@-
    2f74:	2001           	movel %d1,%d0
    2f76:	d080           	addl %d0,%d0
    2f78:	9180           	subxl %d0,%d0
    2f7a:	4480           	negl %d0
    2f7c:	2f00           	movel %d0,%sp@-
    2f7e:	4a81           	tstl %d1
    2f80:	6c00 fe04      	bgew 2d86 <_vsnprintf+0x534>
    2f84:	60c4           	bras 2f4a <_vsnprintf+0x6f8>
    2f86:	7000           	moveq #0,%d0
    2f88:	4600           	notb %d0
    2f8a:	c096           	andl %fp@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2f8c:	2f04           	movel %d4,%sp@-
    2f8e:	2f0b           	movel %a3,%sp@-
    2f90:	2f06           	movel %d6,%sp@-
    2f92:	2f09           	movel %a1,%sp@-
    2f94:	42a7           	clrl %sp@-
    2f96:	2f00           	movel %d0,%sp@-
    2f98:	6000 fb58      	braw 2af2 <_vsnprintf+0x2a0>
          while (l++ < width) {
    2f9c:	2444           	moveal %d4,%a2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2f9e:	2c45           	moveal %d5,%fp
        break;
    2fa0:	6000 fa28      	braw 29ca <_vsnprintf+0x178>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2fa4:	2f04           	movel %d4,%sp@-
    2fa6:	2f0b           	movel %a3,%sp@-
    2fa8:	2f06           	movel %d6,%sp@-
    2faa:	2f09           	movel %a1,%sp@-
    2fac:	42a7           	clrl %sp@-
    2fae:	2f16           	movel %fp@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2fb0:	2f02           	movel %d2,%sp@-
    2fb2:	2f0a           	movel %a2,%sp@-
    2fb4:	2f03           	movel %d3,%sp@-
    2fb6:	2f0d           	movel %a5,%sp@-
    2fb8:	4eb9 0000 23b2 	jsr 23b2 <_ntoa_long>
    2fbe:	2440           	moveal %d0,%a2
    2fc0:	4fef 0028      	lea %sp@(40),%sp
    2fc4:	6000 fb40      	braw 2b06 <_vsnprintf+0x2b4>
          while (l++ < width) {
    2fc8:	264a           	moveal %a2,%a3
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2fca:	45eb 0001      	lea %a3@(1),%a2
    2fce:	2f02           	movel %d2,%sp@-
    2fd0:	2f0b           	movel %a3,%sp@-
    2fd2:	2f03           	movel %d3,%sp@-
    2fd4:	2016           	movel %fp@,%d0
    2fd6:	4880           	extw %d0
    2fd8:	3040           	moveaw %d0,%a0
    2fda:	2f08           	movel %a0,%sp@-
    2fdc:	4e95           	jsr %a5@
    2fde:	4fef 0010      	lea %sp@(16),%sp
    2fe2:	6000 fe24      	braw 2e08 <_vsnprintf+0x5b6>
          while (l++ < width) {
    2fe6:	2800           	movel %d0,%d4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2fe8:	122f 002f      	moveb %sp@(47),%d1
    2fec:	6600 ff24      	bnew 2f12 <_vsnprintf+0x6c0>
    2ff0:	6000 fe72      	braw 2e64 <_vsnprintf+0x612>
        format++;
    2ff4:	2849           	moveal %a1,%a4
    2ff6:	6000 f972      	braw 296a <_vsnprintf+0x118>

00002ffa <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    2ffa:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2ffe:	486e 000c      	pea %fp@(12)
    3002:	2f2e 0008      	movel %fp@(8),%sp@-
    3006:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    300a:	486e ffff      	pea %fp@(-1)
    300e:	4879 0000 283a 	pea 283a <_out_char>
    3014:	4eb9 0000 2852 	jsr 2852 <_vsnprintf>
  va_end(va);
  return ret;
    301a:	4fef 0014      	lea %sp@(20),%sp
}
    301e:	4e5e           	unlk %fp
    3020:	4e75           	rts

00003022 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    3022:	2f02           	movel %d2,%sp@-
    3024:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    3028:	0c02 000a      	cmpib #10,%d2
    302c:	6714           	beqs 3042 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    302e:	41f9 0000 371e 	lea 371e <buf>,%a0
    3034:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    3036:	2f48 0008      	movel %a0,%sp@(8)
}
    303a:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    303c:	4ef9 0000 3064 	jmp 3064 <mcPrint>
    mcPrint(crbuf);
    3042:	4879 0000 3290 	pea 3290 <crbuf>
    3048:	4eb9 0000 3064 	jsr 3064 <mcPrint>
    304e:	588f           	addql #4,%sp
  buf[0] = chr;
    3050:	41f9 0000 371e 	lea 371e <buf>,%a0
    3056:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    3058:	2f48 0008      	movel %a0,%sp@(8)
}
    305c:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    305e:	4ef9 0000 3064 	jmp 3064 <mcPrint>

00003064 <mcPrint>:
    3064:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    3068:	206f 0010      	moveal %sp@(16),%a0
    306c:	7200           	moveq #0,%d1
    306e:	4e4e           	trap #14
    3070:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    3074:	4e75           	rts

00003076 <mcCheckDeviceSupport>:
    3076:	2f01           	movel %d1,%sp@-
    3078:	7207           	moveq #7,%d1
    307a:	7000           	moveq #0,%d0
    307c:	4e4e           	trap #14
    307e:	b0bc 1234 fedc 	cmpl #305463004,%d0
    3084:	6702           	beqs 3088 <mcCheckDeviceSupport+0x12>
    3086:	7000           	moveq #0,%d0
    3088:	221f           	movel %sp@+,%d1
    308a:	4e75           	rts

0000308c <mcGetDeviceCount>:
    308c:	2f01           	movel %d1,%sp@-
    308e:	7208           	moveq #8,%d1
    3090:	4e4e           	trap #14
    3092:	221f           	movel %sp@+,%d1
    3094:	4e75           	rts

00003096 <mcGetDevice>:
    3096:	2f01           	movel %d1,%sp@-
    3098:	202f 0008      	movel %sp@(8),%d0
    309c:	206f 000c      	moveal %sp@(12),%a0
    30a0:	7209           	moveq #9,%d1
    30a2:	4e4e           	trap #14
    30a4:	221f           	movel %sp@+,%d1
    30a6:	4e75           	rts

000030a8 <mcReadDevice>:
    30a8:	2f01           	movel %d1,%sp@-
    30aa:	206f 0008      	moveal %sp@(8),%a0
    30ae:	720b           	moveq #11,%d1
    30b0:	4e4e           	trap #14
    30b2:	221f           	movel %sp@+,%d1
    30b4:	4e75           	rts

000030b6 <mcSendDevice>:
    30b6:	2f01           	movel %d1,%sp@-
    30b8:	202f 0008      	movel %sp@(8),%d0
    30bc:	206f 000c      	moveal %sp@(12),%a0
    30c0:	720c           	moveq #12,%d1
    30c2:	4e4e           	trap #14
    30c4:	221f           	movel %sp@+,%d1
    30c6:	4e75           	rts

000030c8 <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    30c8:	41f9 0000 3294 	lea 3294 <buf>,%a0
    30ce:	b1fc 0000 6f28 	cmpal #28456,%a0
    30d4:	641c           	bccs 30f2 <__kinit+0x2a>
    30d6:	203c 0000 6f28 	movel #28456,%d0
    30dc:	0480 0000 3295 	subil #12949,%d0
    30e2:	72fc           	moveq #-4,%d1
    30e4:	c081           	andl %d1,%d0
    30e6:	0680 0000 3298 	addil #12952,%d0
    30ec:	4298           	clrl %a0@+
    30ee:	b088           	cmpl %a0,%d0
    30f0:	66fa           	bnes 30ec <__kinit+0x24>
}
    30f2:	4e75           	rts

000030f4 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    30f4:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    30f8:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    30fc:	7200           	moveq #0,%d1
    30fe:	3239 0000 3724 	movew 3724 <cxa_atexit_count>,%d1
    3104:	2401           	movel %d1,%d2
    3106:	5382           	subql #1,%d2
    3108:	4a81           	tstl %d1
    310a:	6728           	beqs 3134 <__cxa_finalize+0x40>
    310c:	2001           	movel %d1,%d0
    310e:	e788           	lsll #3,%d0
    3110:	2440           	moveal %d0,%a2
    3112:	95c1           	subal %d1,%a2
    3114:	d5ca           	addal %a2,%a2
    3116:	d5fc 0000 3718 	addal #14104,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    311c:	4a83           	tstl %d3
    311e:	671a           	beqs 313a <__cxa_finalize+0x46>
    3120:	b6aa 0008      	cmpl %a2@(8),%d3
    3124:	6714           	beqs 313a <__cxa_finalize+0x46>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3126:	45ea fff2      	lea %a2@(-14),%a2
    312a:	51ca fff0      	dbf %d2,311c <__cxa_finalize+0x28>
    312e:	4242           	clrw %d2
    3130:	5382           	subql #1,%d2
    3132:	64e8           	bccs 311c <__cxa_finalize+0x28>
            entry->func(entry->ptr);
            entry->done = true;
        }
    }
}
    3134:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    3138:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    313a:	4a2a 000c      	tstb %a2@(12)
    313e:	66e6           	bnes 3126 <__cxa_finalize+0x32>
            entry->func(entry->ptr);
    3140:	2f2a 0004      	movel %a2@(4),%sp@-
    3144:	2052           	moveal %a2@,%a0
    3146:	4e90           	jsr %a0@
            entry->done = true;
    3148:	157c 0001 000c 	moveb #1,%a2@(12)
    314e:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3150:	45ea fff2      	lea %a2@(-14),%a2
    3154:	51ca ffc6      	dbf %d2,311c <__cxa_finalize+0x28>
    3158:	4242           	clrw %d2
    315a:	5382           	subql #1,%d2
    315c:	64be           	bccs 311c <__cxa_finalize+0x28>
    315e:	60d4           	bras 3134 <__cxa_finalize+0x40>

00003160 <__udivsi3>:
    3160:	2f02           	movel %d2,%sp@-
    3162:	222f 000c      	movel %sp@(12),%d1
    3166:	202f 0008      	movel %sp@(8),%d0
    316a:	0c81 0001 0000 	cmpil #65536,%d1
    3170:	6416           	bccs 3188 <L3>
    3172:	2400           	movel %d0,%d2
    3174:	4242           	clrw %d2
    3176:	4842           	swap %d2
    3178:	84c1           	divuw %d1,%d2
    317a:	3002           	movew %d2,%d0
    317c:	4840           	swap %d0
    317e:	342f 000a      	movew %sp@(10),%d2
    3182:	84c1           	divuw %d1,%d2
    3184:	3002           	movew %d2,%d0
    3186:	6030           	bras 31b8 <L6>

00003188 <L3>:
    3188:	2401           	movel %d1,%d2

0000318a <L4>:
    318a:	e289           	lsrl #1,%d1
    318c:	e288           	lsrl #1,%d0
    318e:	0c81 0001 0000 	cmpil #65536,%d1
    3194:	64f4           	bccs 318a <L4>
    3196:	80c1           	divuw %d1,%d0
    3198:	0280 0000 ffff 	andil #65535,%d0
    319e:	2202           	movel %d2,%d1
    31a0:	c2c0           	muluw %d0,%d1
    31a2:	4842           	swap %d2
    31a4:	c4c0           	muluw %d0,%d2
    31a6:	4842           	swap %d2
    31a8:	4a42           	tstw %d2
    31aa:	660a           	bnes 31b6 <L5>
    31ac:	d282           	addl %d2,%d1
    31ae:	6506           	bcss 31b6 <L5>
    31b0:	b2af 0008      	cmpl %sp@(8),%d1
    31b4:	6302           	blss 31b8 <L6>

000031b6 <L5>:
    31b6:	5380           	subql #1,%d0

000031b8 <L6>:
    31b8:	241f           	movel %sp@+,%d2
    31ba:	4e75           	rts

000031bc <__umodsi3>:
    31bc:	222f 0008      	movel %sp@(8),%d1
    31c0:	202f 0004      	movel %sp@(4),%d0
    31c4:	2f01           	movel %d1,%sp@-
    31c6:	2f00           	movel %d0,%sp@-
    31c8:	4eb9 0000 3160 	jsr 3160 <__udivsi3>
    31ce:	508f           	addql #8,%sp
    31d0:	222f 0008      	movel %sp@(8),%d1
    31d4:	2f01           	movel %d1,%sp@-
    31d6:	2f00           	movel %d0,%sp@-
    31d8:	4eb9 0000 31ec 	jsr 31ec <__mulsi3>
    31de:	508f           	addql #8,%sp
    31e0:	222f 0004      	movel %sp@(4),%d1
    31e4:	9280           	subl %d0,%d1
    31e6:	2001           	movel %d1,%d0
    31e8:	4e75           	rts
	...

000031ec <__mulsi3>:
    31ec:	302f 0004      	movew %sp@(4),%d0
    31f0:	c0ef 000a      	muluw %sp@(10),%d0
    31f4:	322f 0006      	movew %sp@(6),%d1
    31f8:	c2ef 0008      	muluw %sp@(8),%d1
    31fc:	d041           	addw %d1,%d0
    31fe:	4840           	swap %d0
    3200:	4240           	clrw %d0
    3202:	322f 0006      	movew %sp@(6),%d1
    3206:	c2ef 000a      	muluw %sp@(10),%d1
    320a:	d081           	addl %d1,%d0
    320c:	4e75           	rts
    320e:	496e           	.short 0x496e
    3210:	7374           	.short 0x7374
    3212:	616c           	bsrs 3280 <__mulsi3+0x94>
    3214:	6c20           	bges 3236 <__mulsi3+0x4a>
    3216:	6861           	bvcs 3279 <__mulsi3+0x8d>
    3218:	6e64           	bgts 327e <__mulsi3+0x92>
    321a:	6c65           	bges 3281 <__mulsi3+0x95>
    321c:	7273           	moveq #115,%d1
    321e:	0a00 4552      	eorib #82,%d0
    3222:	524f           	addqw #1,%sp
    3224:	523a           	.short 0x523a
    3226:	204e           	moveal %fp,%a0
    3228:	6f20           	bles 324a <__mulsi3+0x5e>
    322a:	6465           	bccs 3291 <crbuf+0x1>
    322c:	7669           	moveq #105,%d3
    322e:	6365           	blss 3295 <buf+0x1>
    3230:	2073 7570 706f 	moveal %a3@(00000000706f7274),%a0
    3236:	7274 
    3238:	0a00 4552      	eorib #82,%d0
    323c:	524f           	addqw #1,%sp
    323e:	523a           	.short 0x523a
    3240:	2049           	moveal %a1,%a0
    3242:	6e73           	bgts 32b7 <uart_b+0x1>
    3244:	7566           	.short 0x7566
    3246:	6669           	bnes 32b1 <device+0x1b>
    3248:	6369           	blss 32b3 <device+0x1d>
    324a:	656e           	bcss 32ba <uart_b+0x4>
    324c:	7420           	moveq #32,%d2
    324e:	6465           	bccs 32b5 <device+0x1f>
    3250:	7669           	moveq #105,%d3
    3252:	6365           	blss 32b9 <uart_b+0x3>
    3254:	730a           	.short 0x730a
    3256:	0045 5252      	oriw #21074,%d5
    325a:	4f52           	.short 0x4f52
    325c:	3a20           	movew %a0@-,%d5
    325e:	556e 6162      	subqw #2,%fp@(24930)
    3262:	6c65           	bges 32c9 <uart_b+0x13>
    3264:	2074 6f20 6765 	moveal %a4@(0000000000006765,%d6:l:8),%a0
    326a:	7420           	moveq #32,%d2
    326c:	6465           	bccs 32d3 <uart_b+0x1d>
    326e:	7669           	moveq #105,%d3
    3270:	6365           	blss 32d7 <uart_b+0x21>
    3272:	0a00 5269      	eorib #105,%d0
    3276:	6768           	beqs 32e0 <uart_b+0x2a>
    3278:	746f           	moveq #111,%d2
    327a:	2c20           	movel %a0@-,%d6
    327c:	7468           	moveq #104,%d2
    327e:	6174           	bsrs 32f4 <uart_b+0x3e>
    3280:	2773 2064 6f6e 	movel %a3@(0000000000000064,%d2:w),%a3@(28526)
    3286:	652e           	bcss 32b6 <uart_b>
    3288:	2e2e 0a00      	movel %fp@(2560),%d7
    328c:	
Disassembly of section .bss:

00003294 <buf>:
	...

00003296 <device>:
	...

000032b6 <uart_b>:
	...

000036bc <RINGBUF_A>:
    36bc:	0000 0000      	orib #0,%d0

000036c0 <RINGBUF_B>:
    36c0:	0000 0000      	orib #0,%d0

000036c4 <BASEADDR>:
    36c4:	0000 0000      	orib #0,%d0

000036c8 <CHAIN>:
    36c8:	0000 0000      	orib #0,%d0

000036cc <TEMP_REGS>:
	...

0000371c <INTR_FLAG>:
	...

0000371e <buf>:
	...

00003720 <SAVE_PROG_EXIT>:
    3720:	0000 0000      	orib #0,%d0

00003724 <cxa_atexit_count>:
	...

00003726 <cxa_atexits>:
	...
